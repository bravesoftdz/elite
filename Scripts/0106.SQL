/*
** UDF CROSSPLATFORM (AS NOVAS FUNÇÕES ESTAO NO SCRIPT 86)
*/

DROP EXTERNAL FUNCTION F_ADDMONTH!
DROP EXTERNAL FUNCTION F_ADDYEAR!
DROP EXTERNAL FUNCTION F_AGEINDAYS!
DROP EXTERNAL FUNCTION F_AGEINDAYSTHRESHOLD!
DROP EXTERNAL FUNCTION F_AGEINMONTHS!
DROP EXTERNAL FUNCTION F_AGEINMONTHSTHRESHOLD!
DROP EXTERNAL FUNCTION F_AGEINWEEKS!
DROP EXTERNAL FUNCTION F_AGEINWEEKSTHRESHOLD!
DROP EXTERNAL FUNCTION F_BIGLRTRIM!
DROP EXTERNAL FUNCTION F_BIGSTRINGLENGTH!
DROP EXTERNAL FUNCTION F_BIGSUBSTR!
DROP EXTERNAL FUNCTION F_CDOWLONG!
DROP EXTERNAL FUNCTION F_CDOWSHORT!
DROP EXTERNAL FUNCTION F_CHARACTER!
DROP EXTERNAL FUNCTION F_CLOSEDEBUGGEROUTPUT!
DROP EXTERNAL FUNCTION F_CMONTHLONG!
DROP EXTERNAL FUNCTION F_CMONTHSHORT!
DROP EXTERNAL FUNCTION F_CRLF!
DROP EXTERNAL FUNCTION F_DAYOFMONTH!
DROP EXTERNAL FUNCTION F_DAYOFWEEK!
DROP EXTERNAL FUNCTION F_DAYOFYEAR!
DROP EXTERNAL FUNCTION F_DEBUG!
DROP EXTERNAL FUNCTION F_DOLLARVAL!
DROP EXTERNAL FUNCTION F_DOUBLEABS!
DROP EXTERNAL FUNCTION F_EVALUATECYCLEEXPRESSION!
DROP EXTERNAL FUNCTION F_EVALUATEEXPRESSION!
DROP EXTERNAL FUNCTION F_FINDNTHWORD!
DROP EXTERNAL FUNCTION F_FINDWORD!
DROP EXTERNAL FUNCTION F_FINDWORDINDEX!
DROP EXTERNAL FUNCTION F_FIXEDPOINT!
DROP EXTERNAL FUNCTION F_GENERATEFORMATTEDNAME!
DROP EXTERNAL FUNCTION F_GENERATESNDXINDEX!
DROP EXTERNAL FUNCTION F_IBPASSWORD!
DROP EXTERNAL FUNCTION F_IBTEMPPATH!
DROP EXTERNAL FUNCTION F_ISDIVISIBLEBY!
DROP EXTERNAL FUNCTION F_LINEWRAP!
DROP EXTERNAL FUNCTION F_LTRIM!
DROP EXTERNAL FUNCTION F_MAXDATE!
DROP EXTERNAL FUNCTION F_MINDATE!
DROP EXTERNAL FUNCTION F_MODULO!
DROP EXTERNAL FUNCTION F_MONTH!
DROP EXTERNAL FUNCTION F_PADLEFT!
DROP EXTERNAL FUNCTION F_PADRIGHT!
DROP EXTERNAL FUNCTION F_PROPERCASE!
DROP EXTERNAL FUNCTION F_QUARTER!
DROP EXTERNAL FUNCTION F_RIGHT!
DROP EXTERNAL FUNCTION F_RTRIM!
DROP EXTERNAL FUNCTION F_SETDEBUGGEROUTPUT!
DROP EXTERNAL FUNCTION F_STRIPDATE!
DROP EXTERNAL FUNCTION F_STRIPSTRING!
DROP EXTERNAL FUNCTION F_STRIPTIME!
DROP EXTERNAL FUNCTION F_SUBSTR!
DROP EXTERNAL FUNCTION F_VALIDATECYCLEEXPRESSION!
DROP EXTERNAL FUNCTION F_VALIDATENAMEFORMAT!
DROP EXTERNAL FUNCTION F_VALIDATEREGULAREXPRESSION!
DROP EXTERNAL FUNCTION F_VALIDATESTRINGINRE!
DROP EXTERNAL FUNCTION F_WEEKOFYEAR!
DROP EXTERNAL FUNCTION F_WOY!
DROP EXTERNAL FUNCTION F_YEAR!
DROP EXTERNAL FUNCTION F_YEAROFYEAR!


/*
** SUBSTITUTAS DE F_LEFT
*/

ALTER PROCEDURE REL_NOTACORPO (
    CODMOVIMENTO INTEGER)
RETURNS (
    ES SMALLINT,
    CODCLIENTE INTEGER,
    DATA TIMESTAMP,
    SERVICOS VARCHAR(254) CHARACTER SET NONE,
    VALOR_SERVICOS NUMERIC(9,2),
    VALOR_ITENS NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    VALOR_PRODUTOS NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    VALOR_TOTAL NUMERIC(9,2),
    OBSERVACOES VARCHAR(254) CHARACTER SET NONE,
    NOTA_NUMERO INTEGER,
    NOTA_DATAEMISSAO TIMESTAMP,
    NOTA_CODNATUOPER VARCHAR(10) CHARACTER SET NONE,
    NOTA_CODTRANSPORTADOR INTEGER,
    NOTA_PLACAVEICULO VARCHAR(10) CHARACTER SET NONE,
    NOTA_UFVEICULO VARCHAR(2) CHARACTER SET NONE,
    NOTA_FRETE SMALLINT,
    NOTA_VALOR_FRETE NUMERIC(9,2),
    NOTA_VALOR_SEGURO NUMERIC(9,2),
    NOTA_VALOR_OUTROS NUMERIC(9,2),
    NOTA_VALOR_TOTAL NUMERIC(9,2),
    NOTA_QUANTIDADE NUMERIC(9,2),
    NOTA_ESPECIE VARCHAR(30) CHARACTER SET NONE,
    NOTA_MARCA VARCHAR(20) CHARACTER SET NONE,
    NOTA_VOLNUM INTEGER,
    NOTA_PESOBRUTO NUMERIC(9,2),
    NOTA_PESOLIQUIDO NUMERIC(9,2),
    NOTA_DADOSADICIONAIS VARCHAR(254) CHARACTER SET NONE,
    CODVENDEDOR INTEGER,
    STATUS VARCHAR(20) CHARACTER SET NONE,
    CONDICAO VARCHAR(40) CHARACTER SET NONE,
    DATAINICIO TIMESTAMP,
    DATATERMINO TIMESTAMP,
    ICMSSIMPLES CHAR(1) CHARACTER SET NONE,
    ICMSSIMPALIQ NUMERIC(9,4),
    ISSALIQ NUMERIC(9,4),
    VALOR_ISS NUMERIC(9,2),
    NOTA_IESUBST VARCHAR(20) CHARACTER SET NONE,
    NOTA_DATASAIDA TIMESTAMP,
    NOTA_BASEICMS NUMERIC(9,4),
    NOTA_BASEICMSSUBST NUMERIC(9,4),
    NOTA_VALORICMSSUBST NUMERIC(9,2),
    VALOR_IPI NUMERIC(9,2),
    CODVENDEDOR_ABRE INTEGER,
    DESCONTOTXT VARCHAR(40) CHARACTER SET NONE,
    CLI_NOME VARCHAR(40) CHARACTER SET NONE,
    CLI_RAZAOSOCIAL VARCHAR(40) CHARACTER SET NONE,
    CLI_LOGRADOURO VARCHAR(60) CHARACTER SET NONE,
    CLI_NUMERO INTEGER,
    CLI_COMPLEMENTO VARCHAR(40) CHARACTER SET NONE,
    CLI_BAIRRO VARCHAR(60) CHARACTER SET NONE,
    CLI_CEP VARCHAR(10) CHARACTER SET NONE,
    CLI_CIDADE VARCHAR(60) CHARACTER SET NONE,
    CLI_ESTADO VARCHAR(2) CHARACTER SET NONE,
    CLI_FONE VARCHAR(20) CHARACTER SET NONE,
    CLI_FAX VARCHAR(20) CHARACTER SET NONE,
    CLI_EMAIL VARCHAR(50) CHARACTER SET NONE,
    CLI_RGIE VARCHAR(20) CHARACTER SET NONE,
    CLI_CPFCGC VARCHAR(20) CHARACTER SET NONE,
    TRA_NOME VARCHAR(40) CHARACTER SET NONE,
    TRA_LOGRADOURO VARCHAR(60) CHARACTER SET NONE,
    TRA_NUMERO INTEGER,
    TRA_COMPLEMENTO VARCHAR(40) CHARACTER SET NONE,
    TRA_BAIRRO VARCHAR(60) CHARACTER SET NONE,
    TRA_CEP VARCHAR(10) CHARACTER SET NONE,
    TRA_CIDADE VARCHAR(60) CHARACTER SET NONE,
    TRA_ESTADO VARCHAR(2) CHARACTER SET NONE,
    TRA_FONE VARCHAR(20) CHARACTER SET NONE,
    TRA_FAX VARCHAR(20) CHARACTER SET NONE,
    TRA_EMAIL VARCHAR(50) CHARACTER SET NONE,
    TRA_RGIE VARCHAR(20) CHARACTER SET NONE,
    TRA_CPFCGC VARCHAR(20) CHARACTER SET NONE,
    CODIGO INTEGER,
    MARCA VARCHAR(40) CHARACTER SET NONE,
    MODELO VARCHAR(40) CHARACTER SET NONE,
    DEFEITO VARCHAR(40) CHARACTER SET NONE,
    GARANTIA CHAR(1) CHARACTER SET NONE,
    SERIE VARCHAR(40) CHARACTER SET NONE,
    ACESSORIOS VARCHAR(50) CHARACTER SET NONE,
    CONDICAOEXTERNA VARCHAR(40) CHARACTER SET NONE,
    SOLICITANTE VARCHAR(40) CHARACTER SET NONE,
    VENDEDORABRE VARCHAR(40) CHARACTER SET NONE,
    VENDEDOR VARCHAR(40) CHARACTER SET NONE,
    USUARIO VARCHAR(40) CHARACTER SET NONE,
    CLI_CONTRATO CHAR(1) CHARACTER SET NONE,
    CLI_KM INTEGER,
    NATUREZAOPERACAO VARCHAR(30) CHARACTER SET NONE,
    CODEMPRESA INTEGER,
    EMPRESA_NOME VARCHAR(40) CHARACTER SET NONE,
    EMPRESA_RAZAOSOCIAL VARCHAR(40) CHARACTER SET NONE,
    EMPRESA_CNPJ VARCHAR(20) CHARACTER SET NONE,
    EMPRESA_IE VARCHAR(20) CHARACTER SET NONE,
    EMPRESA_LOGRADOURO VARCHAR(60) CHARACTER SET NONE,
    EMPRESA_NUMERO INTEGER,
    EMPRESA_COMPLEMENTO VARCHAR(40) CHARACTER SET NONE,
    EMPRESA_BAIRRO VARCHAR(60) CHARACTER SET NONE,
    EMPRESA_CIDADE VARCHAR(60) CHARACTER SET NONE,
    EMPRESA_ESTADO CHAR(2) CHARACTER SET NONE,
    EMPRESA_CEP VARCHAR(9) CHARACTER SET NONE,
    EMPRESA_FONE VARCHAR(20) CHARACTER SET NONE,
    TIPOOS VARCHAR(40) CHARACTER SET NONE,
    XX_ENTRADA CHAR(2) CHARACTER SET NONE,
    XX_SAIDA CHAR(2) CHARACTER SET NONE)
AS
DECLARE VARIABLE TEMP_PESSOAFISICA CHAR(1);
DECLARE VARIABLE TEMP_RAZAOSOCIAL VARCHAR(40);
DECLARE VARIABLE TEMP_IE VARCHAR(20);
DECLARE VARIABLE TEMP_CGC VARCHAR(20);
DECLARE VARIABLE CODMARCA INTEGER;
DECLARE VARIABLE CODMODELO INTEGER;
DECLARE VARIABLE CODDEFEITO INTEGER;
DECLARE VARIABLE OSTIPO INTEGER;
BEGIN
  SELECT
    CODIGO,
    ES,
    CODCLIENTE,
    DATA,
    UDF_LEFT(SERVICOS, 254),
    VALOR_SERVICOS,
    VALOR_ITENS,
    DESCONTO,
    VALOR_PRODUTOS,
    VALOR_ICMS,
    VALOR_TOTAL,
    UDF_LEFT(OBSERVACOES, 254),
    NOTA_NUMERO,
    NOTA_DATAEMISSAO,
    NOTA_CODNATUOPER,
    NOTA_CODTRANSPORTADOR,
    NOTA_PLACAVEICULO,
    NOTA_UFVEICULO,
    NOTA_FRETE,
    NOTA_VALOR_FRETE,
    NOTA_VALOR_SEGURO,
    NOTA_VALOR_OUTROS,
    NOTA_VALOR_TOTAL,
    NOTA_QUANTIDADE,
    NOTA_ESPECIE,
    NOTA_MARCA,
    NOTA_VOLNUM,
    NOTA_PESOBRUTO,
    NOTA_PESOLIQUIDO,
    UDF_LEFT(NOTA_DADOSADICIONAIS, 254),
    CODVENDEDOR,
    STATUS,
    CONDICAO,
    DATAINICIO,
    DATATERMINO,
    ICMSSIMPLES,
    ICMSSIMPALIQ,
    ISSALIQ,
    VALOR_ISS,
    NOTA_IESUBST,
    NOTA_DATASAIDA,
    NOTA_BASEICMS,
    NOTA_BASEICMSSUBST,
    NOTA_VALORICMSSUBST,
    VALOR_IPI,
    CODVENDEDOR_ABRE,
    DESCONTOTXT,
    CODMARCA,
    CODMODELO,
    CODDEFEITO,
    GARANTIA,
    SERIE,
    ACESSORIOS,
    CONDICAOEXTERNA,
    SOLICITANTE,
    CODEMPRESA,
    OSTIPO
  FROM
    MOVIMENTOS MO
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :CODIGO,
    :ES,
    :CODCLIENTE,
    :DATA,
    :SERVICOS,
    :VALOR_SERVICOS,
    :VALOR_ITENS,
    :DESCONTO,
    :VALOR_PRODUTOS,
    :VALOR_ICMS,
    :VALOR_TOTAL,
    :OBSERVACOES,
    :NOTA_NUMERO,
    :NOTA_DATAEMISSAO,
    :NOTA_CODNATUOPER,
    :NOTA_CODTRANSPORTADOR,
    :NOTA_PLACAVEICULO,
    :NOTA_UFVEICULO,
    :NOTA_FRETE,
    :NOTA_VALOR_FRETE,
    :NOTA_VALOR_SEGURO,
    :NOTA_VALOR_OUTROS,
    :NOTA_VALOR_TOTAL,
    :NOTA_QUANTIDADE,
    :NOTA_ESPECIE,
    :NOTA_MARCA,
    :NOTA_VOLNUM,
    :NOTA_PESOBRUTO,
    :NOTA_PESOLIQUIDO,
    :NOTA_DADOSADICIONAIS,
    :CODVENDEDOR,
    :STATUS,
    :CONDICAO,
    :DATAINICIO,
    :DATATERMINO,
    :ICMSSIMPLES,
    :ICMSSIMPALIQ,
    :ISSALIQ,
    :VALOR_ISS,
    :NOTA_IESUBST,
    :NOTA_DATASAIDA,
    :NOTA_BASEICMS,
    :NOTA_BASEICMSSUBST,
    :NOTA_VALORICMSSUBST,
    :VALOR_IPI,
    :CODVENDEDOR_ABRE,
    :DESCONTOTXT,
    :CODMARCA,
    :CODMODELO,
    :CODDEFEITO,
    :GARANTIA,
    :SERIE,
    :ACESSORIOS,
    :CONDICAOEXTERNA,
    :SOLICITANTE,
    :CODEMPRESA,
    :OSTIPO;

  SELECT
    CL.NOME,
    UDF_LEFT(CL.RAZAOSOCIAL, 40),
    CL.PESSOAFISICA,
    CL.NUMERO,
    CL.COMPLEMENTO,
    CL.ESTADO,
    CL.FONE,
    CL.FAX,
    CL.EMAIL,
    CL.RG,
    CL.CPF,
    CL.IE,
    CL.CGC,
    CL.CONTRATO,
    CL.KMS,
    LO.LOGRADOURO,
    BA.BAIRRO,
    CI.CIDADE,
    LO.CEP
  FROM
    CLIENTES CL
    LEFT JOIN LOGRADOUROS LO ON
      ( LO.CODIGO = CL.LOCALIZACAO AND
        LO.BAIRRO = CL.BAIRRO AND
        LO.CIDADE = CL.CIDADE AND
        LO.ESTADO = CL.ESTADO )
    LEFT JOIN BAIRROS BA ON
      ( BA.CODIGO = CL.BAIRRO AND
        BA.CIDADE = CL.CIDADE AND
        BA.ESTADO = CL.ESTADO )
    LEFT JOIN CIDADES CI ON
      ( CI.CODIGO = CL.CIDADE AND
        CI.ESTADO = CL.ESTADO )
  WHERE
    CL.CODIGO = :CODCLIENTE
  INTO
    :CLI_NOME,
    :TEMP_RAZAOSOCIAL,
    :TEMP_PESSOAFISICA,
    :CLI_NUMERO,
    :CLI_COMPLEMENTO,
    :CLI_ESTADO,
    :CLI_FONE,
    :CLI_FAX,
    :CLI_EMAIL,
    :CLI_RGIE,
    :CLI_CPFCGC,
    :TEMP_IE,
    :TEMP_CGC,
    :CLI_CONTRATO,
    :CLI_KM,
    :CLI_LOGRADOURO,
    :CLI_BAIRRO,
    :CLI_CIDADE,
    :CLI_CEP;
  IF ( TEMP_PESSOAFISICA = 'J' ) THEN
   BEGIN
     CLI_RGIE        = TEMP_IE;
     CLI_CPFCGC      = TEMP_CGC;
     CLI_RAZAOSOCIAL = TEMP_RAZAOSOCIAL;
   END ELSE CLI_RAZAOSOCIAL = CLI_NOME;

  SELECT
    TR.NOME,
    UDF_LEFT(TR.RAZAOSOCIAL, 40),
    TR.PESSOAFISICA,
    TR.NUMERO,
    TR.COMPLEMENTO,
    TR.ESTADO,
    TR.FONE,
    TR.FAX,
    TR.EMAIL,
    TR.RG,
    TR.CPF,
    TR.IE,
    TR.CGC,
    LO.LOGRADOURO,
    BA.BAIRRO,
    CI.CIDADE,
    LO.CEP
  FROM
    CLIENTES TR
    LEFT JOIN LOGRADOUROS LO ON
      ( LO.CODIGO = TR.LOCALIZACAO AND
        LO.BAIRRO = TR.BAIRRO AND
        LO.CIDADE = TR.CIDADE AND
        LO.ESTADO = TR.ESTADO )
    LEFT JOIN BAIRROS BA ON
      ( BA.CODIGO = TR.BAIRRO AND
        BA.CIDADE = TR.CIDADE AND
        BA.ESTADO = TR.ESTADO )
    LEFT JOIN CIDADES CI ON
      ( CI.CODIGO = TR.CIDADE AND
        CI.ESTADO = TR.ESTADO )
  WHERE
    TR.CODIGO = :NOTA_CODTRANSPORTADOR
  INTO
    :TRA_NOME,
    :TEMP_RAZAOSOCIAL,
    :TEMP_PESSOAFISICA,
    :TRA_NUMERO,
    :TRA_COMPLEMENTO,
    :TRA_ESTADO,
    :TRA_FONE,
    :TRA_FAX,
    :TRA_EMAIL,
    :TRA_RGIE,
    :TRA_CPFCGC,
    :TEMP_IE,
    :TEMP_CGC,
    :TRA_LOGRADOURO,
    :TRA_BAIRRO,
    :TRA_CIDADE,
    :TRA_CEP;
  IF ( TEMP_PESSOAFISICA = 'J' ) THEN
   BEGIN
     TRA_RGIE   = TEMP_IE;
     TRA_CPFCGC = TEMP_CGC;
   END

  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODVENDEDOR_ABRE
  INTO
    :VENDEDORABRE;

  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODVENDEDOR
  INTO
    :VENDEDOR;

  SELECT
    DESCRICAO
  FROM
    MARCAS
  WHERE
    CODIGO = :CODMARCA
  INTO
    :MARCA;

  SELECT
    DESCRICAO
  FROM
    MODELOS
  WHERE
    CODIGO = :CODMODELO AND
    CODEQUIPAMENTO = :CODMARCA
  INTO
    :MODELO;

  SELECT
    DESCRICAO
  FROM
    DEFEITOS
  WHERE
    CODIGO = :CODDEFEITO
  INTO
    :DEFEITO;

  SELECT
    NATUREZA
  FROM
    NATUOPER
  WHERE
    CODIGO = :NOTA_CODNATUOPER
  INTO
    :NATUREZAOPERACAO;

  SELECT
    TIPO
  FROM
    OSTIPOS
  WHERE
    CODIGO = :OSTIPO
  INTO
    :TIPOOS;

  SELECT
    CL.NOME,
    CL.RAZAOSOCIAL,
    CL.CGC,
    CL.IE,
    CL.LOGRADOURO,
    CL.NUMERO,
    CL.COMPLEMENTO,
    CL.BAIRRO,
    CL.CIDADE,
    CL.ESTADO,
    CL.CEP,
    CL.FONE
  FROM
    SISCONFIG SI
    JOIN REL_CLIENTES CL ON
      (SI.CODCLIENTE = CL.CODIGO)
  WHERE
    SI.CODIGO = :CODEMPRESA
  INTO
    :EMPRESA_NOME,
    :EMPRESA_RAZAOSOCIAL,
    :EMPRESA_CNPJ,
    :EMPRESA_IE,
    :EMPRESA_LOGRADOURO,
    :EMPRESA_NUMERO,
    :EMPRESA_COMPLEMENTO,
    :EMPRESA_BAIRRO,
    :EMPRESA_CIDADE,
    :EMPRESA_ESTADO,
    :EMPRESA_CEP,
    :EMPRESA_FONE;

  USUARIO = USER;

  IF (ES = 1) THEN
   BEGIN

     XX_ENTRADA = 'XX';
     XX_SAIDA   = '  ';

   END ELSE
   BEGIN

     XX_ENTRADA = '  ';
     XX_SAIDA   = 'XX';

   END

 SUSPEND;
END!

ALTER PROCEDURE REL_NOTASER (
    CODMOVIMENTO INTEGER)
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(13) CHARACTER SET NONE,
    DESCRICAO1 VARCHAR(40) CHARACTER SET NONE,
    DESCRICAO2 VARCHAR(60) CHARACTER SET NONE,
    SERIE VARCHAR(20) CHARACTER SET NONE,
    VALOR_VENDA NUMERIC(9,2),
    ICMS_VENDA NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    QUANTIDADE NUMERIC(9,2),
    VALOR_PAGO NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    SITTRIBU CHAR(3) CHARACTER SET NONE,
    VALOR_ITEM NUMERIC(9,2))
AS
BEGIN
   FOR
   SELECT
     ID.CODPRODUTO,
     ID.BARRA,
     UDF_LEFT(PO.DESCRICAO, 40),
     ID.SERIE,
     ID.VALOR_VENDA,
     ID.ICMSVENDA,
     ID.DESCONTO,
     ID.QUANTIDADE,
     ID.VALOR_PAGO,
     ID.VALOR_ICMS,
     TI.SITTRIBU
   FROM
     INDIVIDUAIS ID
     LEFT JOIN PRODUTOS PO ON
       ( PO.CODIGO = ID.CODPRODUTO )
     LEFT JOIN TEMPITENS TI ON
       ( TI.CODMOVIMENTO = ID.CODMOVENTRADA AND
         TI.CODPRODUTO   = ID.CODPRODUTO    AND
         TI.CODIGO       = ID.CODITEM )
   WHERE
     ID.CODMOVSAIDA = :CODMOVIMENTO AND
     ID.VENDIDO = 'S' AND
     ID.PS = 'S'
   INTO
     :CODIGO,
     :BARRA,
     :DESCRICAO1,
     :SERIE,
     :VALOR_VENDA,
     :ICMS_VENDA,
     :DESCONTO,
     :QUANTIDADE,
     :VALOR_PAGO,
     :VALOR_ICMS,
     :SITTRIBU
   DO
   BEGIN
     DESCRICAO2 = DESCRICAO1 || ' ' || SERIE;
     VALOR_ITEM = VALOR_VENDA - DESCONTO;
     SUSPEND;
   END
END!

ALTER PROCEDURE ESTORNO (
    CODMOVIMENTO INTEGER)
AS
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE NUMERO INTEGER;
DECLARE VARIABLE CODDOCUMENTO INTEGER;
DECLARE VARIABLE INFODOC VARCHAR(50);
DECLARE VARIABLE CODCONTA INTEGER;
DECLARE VARIABLE TOTAL_PAGO NUMERIC(9,2);
DECLARE VARIABLE DATAVENCIMENTO TIMESTAMP;
DECLARE VARIABLE DESCRICAO VARCHAR(40);
DECLARE VARIABLE NOME VARCHAR(40);
DECLARE VARIABLE CODIGO INTEGER;
BEGIN
  /* MARCO COMO CANCELADO */
  UPDATE
    MOVIMENTOS
  SET
    TIPO = 9
  WHERE
    CODIGO = :CODMOVIMENTO;
  /* DEVOLVO OS PRODUTOS */
  UPDATE
    INDIVIDUAIS
  SET
    VENDIDO = 'N'
  WHERE
    CODMOVSAIDA = :CODMOVIMENTO;
  /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
  FOR
  SELECT
    ES,
    NUMERO,
    CODDOCUMENTO,
    INFODOC,
    CODCONTA,
    TOTAL_PAGO,
    DATAVENCIMENTO
  FROM
    PAGAMENTOS
  WHERE
    CODMOVIMENTO = :CODMOVIMENTO AND
    PAGO = 1
  INTO
    :ES,
    :NUMERO,
    :CODDOCUMENTO,
    :INFODOC,
    :CODCONTA,
    :TOTAL_PAGO,
    :DATAVENCIMENTO
  DO
  BEGIN
    /* PEGO O NOME DO CLIENTE */
    IF (ES = 1) THEN
     BEGIN
       SELECT
         FO.NOME
       FROM
         MOVIMENTOS MO
         JOIN CLIENTES FO ON
           (FO.CODIGO = MO.CODCLIENTE)
       WHERE
         MO.CODIGO = :CODMOVIMENTO
       INTO
         :NOME;
     END ELSE
     BEGIN
       SELECT
         CL.NOME
       FROM
         MOVIMENTOS MO
         JOIN CLIENTES CL ON
           (CL.CODIGO = MO.CODCLIENTE)
       WHERE
         MO.CODIGO = :CODMOVIMENTO
       INTO
         :NOME;
     END
    /* MONTO A DESCRICAO */
    IF (ES = 1) THEN
      DESCRICAO = 'ESTORNO PARC ' || NUMERO || ' DA COMPRA ' || CODMOVIMENTO || ' ' || UDF_LEFT(NOME, 8);
    ELSE
      DESCRICAO = 'ESTORNO PARC ' || NUMERO || ' DA VENDA ' || CODMOVIMENTO || ' ' || UDF_LEFT(NOME, 8);
    /* INVERTO A CONDICAO PAGAR/RECEBER */
    IF (ES = 1) THEN
      ES = 2;
    ELSE ES = 1;
    /* RETIRO AS HORAS */
    DATAVENCIMENTO = CAST(DATAVENCIMENTO AS DATE);
    /* PEGO O CODIGO DO LANCAMENTO */
    SELECT
      SEQUENCIA
    FROM
      SEQ_OBTER('PAGAMENTOS')
    INTO
      :CODIGO;
    /* GRAVO O ESTORNO DA PARCELA */
    INSERT INTO
      PAGAMENTOS (
        CODIGO,
        CODMOVIMENTO,
        NUMERO,
        DESCRICAO,
        ES,
        DATACADAST,
        VALOR,
        EXTERNO,
        PAGO,
        DESCONTO,
        MULTA_JUROS,
        DATAVENCIMENTO,
        SALDOANT,
        SALDOATU,
        CODCONTA,
        CODDOCUMENTO,
        INFODOC)
      VALUES (
        :CODIGO,
        :CODMOVIMENTO,
        :NUMERO,
        :DESCRICAO,
        :ES,
        'NOW',
        :TOTAL_PAGO,
        'S',
        0,
        0,
        0,
        'NOW',
        0,
        0,
        :CODCONTA,
        :CODDOCUMENTO,
        :INFODOC);
  END
END!

ALTER PROCEDURE PARCELAS (
    TCOND CHAR(255) CHARACTER SET NONE)
RETURNS (
    DIAS INTEGER)
AS
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE CTEMP VARCHAR(1);
DECLARE VARIABLE DTEMP VARCHAR(255);
BEGIN
   N = 0;
   DTEMP = '';
   WHILE (N <= UDF_LEN(TCOND)) DO
    BEGIN
     CTEMP = CAST(UDF_COPY(TCOND, N + 1, 1) AS CHAR(1));
     IF (CTEMP <> '/') THEN
       DTEMP = DTEMP || CTEMP;
     ELSE
      BEGIN
       DIAS = CAST(DTEMP AS INTEGER);
       SUSPEND;
       DTEMP = '';
      END
     N = N + 1;
    END
END!

ALTER PROCEDURE GERAPARCELAS (
    CODIGO INTEGER)
AS
DECLARE VARIABLE TOTAL NUMERIC(9,2);
DECLARE VARIABLE PARCELA NUMERIC(9,2);
DECLARE VARIABLE CONDICAO VARCHAR(40);
DECLARE VARIABLE QUANTIDADE INTEGER;
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE CODPAG INTEGER;
DECLARE VARIABLE DATAMOV DATE;
DECLARE VARIABLE DIAS INTEGER;
DECLARE VARIABLE CODDOC INTEGER;
DECLARE VARIABLE CODPAGO INTEGER;
DECLARE VARIABLE DOCVISTA INTEGER;
DECLARE VARIABLE DOCPRAZO INTEGER;
DECLARE VARIABLE DESCRICAO CHAR(40);
DECLARE VARIABLE TIPO INTEGER;
DECLARE VARIABLE CODCONTA_COMPRADEB INTEGER;
DECLARE VARIABLE CODCONTA_VENDACRE INTEGER;
DECLARE VARIABLE CODCONTA INTEGER;
DECLARE VARIABLE NOME VARCHAR(16);
DECLARE VARIABLE CODCLIENTE INTEGER;
DECLARE VARIABLE CODEMPRESA INTEGER;
BEGIN
   SELECT
      NOTA_VALOR_TOTAL,
      CONDICAO,
      ES,
      DATA,
      TIPO,
      CODCLIENTE,
      CODEMPRESA
   FROM
      MOVIMENTOS
   WHERE
      CODIGO = :CODIGO
   INTO
      :TOTAL,
      :CONDICAO,
      :ES,
      :DATAMOV,
      :TIPO,
      :CODCLIENTE,
      :CODEMPRESA;
   SELECT
      CODDOC_AVISTA,
      CODDOC_PRAZO,
      CODCONTA_COMPRADEB,
      CODCONTA_VENDACRE
   FROM
      SISCONFIG
   WHERE
      CODIGO = :CODEMPRESA
   INTO
      :DOCVISTA,
      :DOCPRAZO,
      :CODCONTA_COMPRADEB,
      :CODCONTA_VENDACRE;
   IF (ES = 1) THEN
    BEGIN
     CODCONTA = CODCONTA_COMPRADEB;
     SELECT
       UDF_LEFT(NOME, 16)
     FROM
       CLIENTES
     WHERE
       CODIGO = :CODCLIENTE
     INTO
       :NOME;
    END
   ELSE
    BEGIN
     CODCONTA = CODCONTA_VENDACRE;
     SELECT
       UDF_LEFT(NOME, 16)
     FROM
       CLIENTES
     WHERE
       CODIGO = :CODCLIENTE
     INTO
       :NOME;
   END
   IF (TOTAL <= 0) THEN EXIT;
   SELECT
      COUNT(*)
   FROM
      PARCELAS(
        :CONDICAO
      )
   INTO
      :QUANTIDADE;
   IF (QUANTIDADE > 0) THEN
    BEGIN
     DELETE FROM
      PAGAMENTOS
     WHERE
      CODMOVIMENTO = :CODIGO;
     PARCELA = CAST((TOTAL / QUANTIDADE) AS INTEGER);
     N = 0;
     FOR
     SELECT DIAS FROM PARCELAS(:CONDICAO) INTO :DIAS DO
      BEGIN
       N = N + 1;
       IF (ES = 1) THEN
          DESCRICAO = 'PARC ' || N || '/' || QUANTIDADE || ' COMPRA ' || CODIGO || ' ' || NOME;
       ELSE
          DESCRICAO = 'PARC ' || N || '/' || QUANTIDADE || ' VENDA ' || CODIGO || ' ' || NOME;
       SELECT SEQUENCIA FROM SEQ_OBTER('PAGAMENTOS') INTO :CODPAG;
       IF (DIAS = 0) THEN
        BEGIN
          CODDOC = DOCVISTA;
          CODPAGO = 0;
        END ELSE
        BEGIN
          CODDOC = DOCPRAZO;
          CODPAGO = 0;
        END
       INSERT INTO PAGAMENTOS (CODIGO, CODMOVIMENTO, NUMERO, DESCRICAO, ES,
         VALOR, DATAVENCIMENTO, CODDOCUMENTO, PAGO, CODCONTA, CODEMPRESA) VALUES (:CODPAG, :CODIGO, :N,
         :DESCRICAO, :ES, :PARCELA, :DATAMOV + :DIAS, :CODDOC, :CODPAGO, :CODCONTA, :CODEMPRESA);
      END
     UPDATE PAGAMENTOS SET VALOR = VALOR + (:TOTAL - (:PARCELA * :QUANTIDADE))
       WHERE CODMOVIMENTO = :CODIGO AND NUMERO = 1;
    END ELSE EXCEPTION CONDICAO_ERRADA;
END!

ALTER PROCEDURE BAIXA (
    CODIGO INTEGER,
    MULTA_JUROS NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    TIPO CHAR(1) CHARACTER SET NONE,
    CONTA INTEGER,
    CODDOCUMENTO INTEGER,
    INFODOC VARCHAR(50) CHARACTER SET NONE)
AS
DECLARE VARIABLE CODMOVIMENTO INTEGER;
DECLARE VARIABLE NUMERO INTEGER;
DECLARE VARIABLE DESCRICAO VARCHAR(40);
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE VALOR NUMERIC(9,2);
DECLARE VARIABLE DATAVENCIMENTO TIMESTAMP;
DECLARE VARIABLE NOVONUM NUMERIC(15,2);
DECLARE VARIABLE CODEMPRESA INTEGER;
BEGIN
  /* FAÇO A BAIXA */
  UPDATE
    PAGAMENTOS
  SET
    PAGO = 1,
    MULTA_JUROS = :MULTA_JUROS,
    DESCONTO = :DESCONTO,
    CODCONTA = :CONTA,
    CODDOCUMENTO = :CODDOCUMENTO,
    INFODOC = :INFODOC
  WHERE
    CODIGO = :CODIGO;
  /* É UMA BAIXA PARCIAL */
  IF ((TIPO = 'P') AND (DESCONTO > 0)) THEN
   BEGIN
     /* LEIO OS DADOS DO PAGAMENTO */
     SELECT
       CODMOVIMENTO,
       UDF_LEFT(DESCRICAO, 35),
       ES,
       DESCONTO,
       DATAVENCIMENTO,
       CODEMPRESA
     FROM
       PAGAMENTOS
     WHERE
       CODIGO = :CODIGO
     INTO
       :CODMOVIMENTO,
       :DESCRICAO,
       :ES,
       :VALOR,
       :DATAVENCIMENTO,
       :CODEMPRESA;
     /* PEGO O PROXIMO CODIGO */
     SELECT
       SEQUENCIA
     FROM
       SEQ_OBTER('PAGAMENTOS')
     INTO
       :CODIGO;
     /* ACERTO A DESCRICAO */
     DESCRICAO = 'ADIC ' || DESCRICAO;
     /* PEGO O NUMERO NOVO */
     SELECT
       MAX(NUMERO) + 1
     FROM
       PAGAMENTOS
     WHERE
       CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :NOVONUM;
     /* INSIRO O PAGAMENTO RESTANTE */
     INSERT INTO
       PAGAMENTOS (
         CODIGO,
         CODMOVIMENTO,
         NUMERO,
         DESCRICAO,
         ES,
         DATACADAST,
         VALOR,
         EXTERNO,
         PAGO,
         DESCONTO,
         MULTA_JUROS,
         DATAVENCIMENTO,
         SALDOANT,
         SALDOATU,
         CODCONTA,
         CODDOCUMENTO,
         CODEMPRESA)
       VALUES (
         :CODIGO,
         :CODMOVIMENTO,
         :NOVONUM,
         :DESCRICAO,
         :ES,
         'NOW',
         :VALOR,
         'S',
         0,
         0,
         0,
         :DATAVENCIMENTO,
         0,
         0,
         :CONTA,
         :CODDOCUMENTO,
         :CODEMPRESA);
   END
END!


/*
** SUBSTITUTAS DE F_LRTRIM
*/

ALTER PROCEDURE FAMILIA (
    ENTRADA VARCHAR(50) CHARACTER SET NONE)
RETURNS (
    SAIDA VARCHAR(50) CHARACTER SET NONE)
AS
DECLARE VARIABLE TAMANHO INTEGER;
DECLARE VARIABLE POSICAO INTEGER;
BEGIN

  /* SAIDA NULA */
  SAIDA = '';

  /* PROCURO O SOBRENOME */
  ENTRADA = UDF_TRIM(ENTRADA);
  TAMANHO = UDF_LEN(ENTRADA);
  POSICAO = TAMANHO - 1;
  WHILE ((POSICAO > -1) AND (UDF_COPY(ENTRADA, POSICAO + 1, 1) <> ' ')) DO
    POSICAO = POSICAO - 1;

  /* VERIFICO A SAIDA */
  IF (POSICAO > -1) THEN
   BEGIN

    /* SEPARO O SOBRENOME */
    SAIDA = UDF_COPY(ENTRADA, POSICAO + 2,
       UDF_LEN(ENTRADA) - POSICAO -1);
    SAIDA = SAIDA || ', ';

    /* RESTANTE DO NOME */
    SAIDA = SAIDA || UDF_COPY(ENTRADA, 1, POSICAO);

   END ELSE SAIDA = ENTRADA;

  SUSPEND;

END!

ALTER PROCEDURE WEBGRID_CLIENTES (
    BUSCA VARCHAR(40) CHARACTER SET NONE)
RETURNS (
    CODIGO INTEGER,
    NOME VARCHAR(40) CHARACTER SET NONE,
    FONE VARCHAR(45) CHARACTER SET NONE,
    CELULAR VARCHAR(20) CHARACTER SET NONE,
    CPF VARCHAR(45) CHARACTER SET NONE,
    CGC VARCHAR(20) CHARACTER SET NONE,
    TIPO CHAR(1) CHARACTER SET NONE)
AS
DECLARE VARIABLE N INTEGER;
BEGIN

  N = 0;

  FOR
  SELECT
    CODIGO,
    NOME,
    FONE,
    CELULAR,
    CPF,
    CGC,
    TIPO
  FROM
    CLIENTES
  WHERE
    NOME LIKE :BUSCA
  ORDER BY
    NOME
  INTO
    :CODIGO,
    :NOME,
    :FONE,
    :CELULAR,
    :CPF,
    :CGC,
    :TIPO
  DO
  BEGIN

    IF ((FONE IS NULL) AND (CELULAR IS NULL)) THEN
      FONE = 'N/A';
    ELSE
      IF ((FONE IS NULL) AND (CELULAR IS NOT NULL)) THEN
         FONE = CELULAR;
      ELSE
         IF ((FONE IS NOT NULL) AND (CELULAR IS NOT NULL)) THEN
            FONE = UDF_TRIM(FONE) || ' - ' || UDF_TRIM(CELULAR);

    IF ((CPF IS NULL) AND (CGC IS NULL)) THEN
      CPF = 'N/A';
    ELSE
      IF ((CPF IS NULL) AND (CGC IS NOT NULL)) THEN
         CPF = CGC;
      ELSE
         IF ((CPF IS NOT NULL) AND (CGC IS NOT NULL)) THEN
            CPF = UDF_TRIM(CPF) || ' - ' || UDF_TRIM(CGC);

    N = N + 1;
    IF (N > 50) THEN
      EXIT;
    ELSE
      SUSPEND;

  END

END!

ALTER PROCEDURE VALOREXTENSO (
    VALOR DOUBLE PRECISION)
RETURNS (
    EXTENSO VARCHAR(254) CHARACTER SET NONE)
AS
DECLARE VARIABLE CONSTVAL DOUBLE PRECISION;
DECLARE VARIABLE CONSTSING VARCHAR(40);
DECLARE VARIABLE CONSTPLUR VARCHAR(40);
DECLARE VARIABLE UNITARIO CHAR(1);
DECLARE VARIABLE VIRGULA CHAR(1);
DECLARE VARIABLE UNIDADE INTEGER;
DECLARE VARIABLE TEMPCONST VARCHAR(254);
BEGIN
  /* INICIALIZO O RETORNO */
  EXTENSO = '';
 FOR
  SELECT
    VALOR,
    CONSTSING,
    CONSTPLUR,
    UNITARIO,
    VIRGULA
  FROM
    VALEXTCONST
  ORDER BY
    VALOR DESC
  INTO
    :CONSTVAL,
    :CONSTSING,
    :CONSTPLUR,
    :UNITARIO,
    :VIRGULA
  DO
  BEGIN
    /* ENCONTRO A UNIDADE DE CADA UM */
    UNIDADE = UDF_TRUNC( VALOR / CONSTVAL );
    /* EH NECESSARIO? */
    IF ( UNIDADE >= 1 ) THEN
     BEGIN
      /* RETIRO O VALOR QUE FOI EXTENDIDO */
    VALOR = VALOR - ( CONSTVAL * UNIDADE );
       /* PREFIXO: EX. 9 MIL REAIS */
       IF ( UNITARIO = 'S' ) THEN
        BEGIN
         EXECUTE PROCEDURE
          VALOREXTENSO( :UNIDADE )
         RETURNING_VALUES
          TEMPCONST;
         EXTENSO = EXTENSO || TEMPCONST || ' ';
        END
       /* COLOCO A CONSTANTE */
       IF (( UNIDADE > 1 ) OR
           /* O NUMERO 100 EH UM CASO ESPECIAL */
        ( UNIDADE = 1 AND CONSTVAL = 100 AND UDF_TRUNC(VALOR) > 0 )) THEN
        EXTENSO = EXTENSO || CONSTPLUR;
       ELSE
        EXTENSO = EXTENSO || CONSTSING;
     /* COLOCO O "E" SE FOR NECESSARIO */
       IF ( UDF_TRUNC(VALOR) > 0 ) THEN
        IF ( VIRGULA = 'S' ) THEN
         EXTENSO = EXTENSO || ', ';
        ELSE
         EXTENSO = EXTENSO || ' E ';
   END
  END
 SUSPEND;
END!

ALTER PROCEDURE MOEDAEXTENSO (
    VALOR DOUBLE PRECISION)
RETURNS (
    EXTENSO VARCHAR(254) CHARACTER SET NONE)
AS
DECLARE VARIABLE MOEDA VARCHAR(40);
DECLARE VARIABLE CENTAVO VARCHAR(40);
DECLARE VARIABLE MOEDASINGULAR VARCHAR(40);
DECLARE VARIABLE MOEDAPLURAL VARCHAR(40);
DECLARE VARIABLE CENTAVOSINGULAR VARCHAR(40);
DECLARE VARIABLE CENTAVOPLURAL VARCHAR(40);
DECLARE VARIABLE VALTEMP INTEGER;
DECLARE VARIABLE CENTEMP INTEGER;
DECLARE VARIABLE TEMPCONST VARCHAR(254);
DECLARE VARIABLE ESPACOS INTEGER;
BEGIN
  /* PEGO A MOEDA */
  SELECT
    UDF_TRIM(MOEDASINGULAR),
    UDF_TRIM(MOEDAPLURAL),
    UDF_TRIM(CENTAVOSINGULAR),
    UDF_TRIM(CENTAVOPLURAL)
  FROM
    CONFIG_PADRAO
  INTO
    :MOEDASINGULAR,
    :MOEDAPLURAL,
    :CENTAVOSINGULAR,
    :CENTAVOPLURAL;
  MOEDA   = '';
  CENTAVO = '';
  /* VALOR INTEIRO */
 VALTEMP = UDF_TRUNC ( VALOR );
  IF ( VALTEMP > 0 ) THEN
   IF ( VALTEMP = 1 ) THEN
    MOEDA = MOEDASINGULAR;
   ELSE
    MOEDA = MOEDAPLURAL;
 /* BUSCO O EXTENSO */
 EXECUTE PROCEDURE
    VALOREXTENSO( :VALTEMP )
  RETURNING_VALUES
    :EXTENSO;
  EXTENSO = EXTENSO || ' ' || MOEDA;
  /* CENTAVOS */
  VALOR   = VALOR - VALTEMP;
  CENTEMP = CAST(( VALOR * 100 ) AS INTEGER);
  IF ( CENTEMP > 0 ) THEN
   BEGIN
    IF ( CENTEMP = 1 ) THEN
     CENTAVO = CENTAVOSINGULAR;
    ELSE
     CENTAVO = CENTAVOPLURAL;
    /* BUSCO O EXTENSO */
    EXECUTE PROCEDURE
      VALOREXTENSO( :CENTEMP )
    RETURNING_VALUES
      :TEMPCONST;
    IF ( VALTEMP > 0 ) THEN
     EXTENSO = EXTENSO || ' E ' || TEMPCONST || ' ' || CENTAVO;
    ELSE
      EXTENSO = TEMPCONST || ' ' || CENTAVO || ' DE ' || MOEDASINGULAR;
   END

  /* COMPLETO COM ASTERISCOS */
  EXTENSO = '(' || EXTENSO || ')';
  ESPACOS = 250 - UDF_LEN(EXTENSO);
  WHILE (ESPACOS > 0) DO
   BEGIN
    EXTENSO = EXTENSO || ' *';
    ESPACOS = ESPACOS - 2;
   END

  SUSPEND;
END!

ALTER PROCEDURE REL_NOTADUP (
    CODMOVIMENTO INTEGER)
RETURNS (
    MOVIMENTO INTEGER,
    NUMERO SMALLINT,
    DESCRICAO VARCHAR(40) CHARACTER SET NONE,
    DATACADAST TIMESTAMP,
    VALOR NUMERIC(9,2),
    DATAVENCIMENTO TIMESTAMP,
    CODIGO INTEGER,
    DOCUMENTO VARCHAR(30) CHARACTER SET NONE,
    CLI_NOME VARCHAR(40) CHARACTER SET NONE,
    CLI_LOGRADOURO VARCHAR(40) CHARACTER SET NONE,
    CLI_NUMERO INTEGER,
    CLI_COMPLEMENTO VARCHAR(40) CHARACTER SET NONE,
    CLI_BAIRRO VARCHAR(60) CHARACTER SET NONE,
    CLI_CEP VARCHAR(10) CHARACTER SET NONE,
    CLI_CIDADE VARCHAR(60) CHARACTER SET NONE,
    CLI_ESTADO VARCHAR(2) CHARACTER SET NONE,
    CLI_FONE VARCHAR(20) CHARACTER SET NONE,
    CLI_FAX VARCHAR(20) CHARACTER SET NONE,
    CLI_EMAIL VARCHAR(50) CHARACTER SET NONE,
    CLI_RGIE VARCHAR(20) CHARACTER SET NONE,
    CLI_CPFCGC VARCHAR(20) CHARACTER SET NONE,
    CODCLIENTE INTEGER,
    DATAPAGO TIMESTAMP,
    NOMEUSUARIO VARCHAR(30) CHARACTER SET NONE,
    DESCONTO NUMERIC(9,2),
    MULTA_JUROS NUMERIC(9,2),
    TOTAL_PAGO NUMERIC(9,2),
    INFODOC VARCHAR(50) CHARACTER SET NONE,
    EXTENSO VARCHAR(254) CHARACTER SET NONE,
    CODEMPRESA INTEGER,
    EMPRESA_NOME VARCHAR(40) CHARACTER SET NONE,
    EMPRESA_RAZAOSOCIAL VARCHAR(40) CHARACTER SET NONE,
    EMPRESA_CNPJ VARCHAR(20) CHARACTER SET NONE,
    EMPRESA_IE VARCHAR(20) CHARACTER SET NONE,
    EMPRESA_LOGRADOURO VARCHAR(60) CHARACTER SET NONE,
    EMPRESA_NUMERO INTEGER,
    EMPRESA_COMPLEMENTO VARCHAR(40) CHARACTER SET NONE,
    EMPRESA_BAIRRO VARCHAR(60) CHARACTER SET NONE,
    EMPRESA_CIDADE VARCHAR(60) CHARACTER SET NONE,
    EMPRESA_ESTADO CHAR(2) CHARACTER SET NONE,
    EMPRESA_CEP VARCHAR(9) CHARACTER SET NONE,
    EMPRESA_FONE VARCHAR(20) CHARACTER SET NONE)
AS
DECLARE VARIABLE CODDOCUMENTO INTEGER;
DECLARE VARIABLE TEMP_PESSOAFISICA CHAR(1);
DECLARE VARIABLE TEMP_RAZAOSOCIAL VARCHAR(40);
DECLARE VARIABLE TEMP_IE VARCHAR(20);
DECLARE VARIABLE TEMP_CGC VARCHAR(20);
BEGIN

   FOR
   SELECT
     CODIGO,
     NUMERO,
     DESCRICAO,
     DATACADAST,
     VALOR,
     DATAVENCIMENTO,
     CODDOCUMENTO,
     DATAPAGO,
     NOMEUSUARIO,
     DESCONTO,
     MULTA_JUROS,
     TOTAL_PAGO,
     INFODOC,
     CODEMPRESA
   FROM
     PAGAMENTOS
   WHERE
     CODMOVIMENTO = :CODMOVIMENTO AND
     ES = 2
   INTO
     :CODIGO,
     :NUMERO,
     :DESCRICAO,
     :DATACADAST,
     :VALOR,
     :DATAVENCIMENTO,
     :CODDOCUMENTO,
     :DATAPAGO,
     :NOMEUSUARIO,
     :DESCONTO,
     :MULTA_JUROS,
     :TOTAL_PAGO,
     :INFODOC,
     :CODEMPRESA
   DO
   BEGIN
     MOVIMENTO = CODMOVIMENTO;

     /* PEGO O DOCUMENTO */
     SELECT
       DOCUMENTO
     FROM
       DOCUMENTOS
     WHERE
       CODIGO = :CODDOCUMENTO
     INTO
       :DOCUMENTO;

     /* CODIGO DO CLIENTE */
     SELECT
       CODCLIENTE
     FROM
       MOVIMENTOS
     WHERE
       CODIGO = :CODMOVIMENTO
     INTO
       :CODCLIENTE;

     /* DADOS DO CLIENTE */
     SELECT
       CL.NOME,
       UDF_LEFT(CL.RAZAOSOCIAL, 40),
       CL.PESSOAFISICA,
       CL.NUMERO,
       CL.COMPLEMENTO,
       CL.ESTADO,
       CL.FONE,
       CL.FAX,
       CL.EMAIL,
       CL.RG,
       CL.CPF,
       CL.IE,
       CL.CGC,
       LO.LOGRADOURO,
       BA.BAIRRO,
       CI.CIDADE,
       LO.CEP
     FROM
       CLIENTES CL
       LEFT JOIN LOGRADOUROS LO ON
         ( LO.CODIGO = CL.LOCALIZACAO AND
           LO.BAIRRO = CL.BAIRRO AND
           LO.CIDADE = CL.CIDADE AND
           LO.ESTADO = CL.ESTADO )
       LEFT JOIN BAIRROS BA ON
         ( BA.CODIGO = CL.BAIRRO AND
           BA.CIDADE = CL.CIDADE AND
           BA.ESTADO = CL.ESTADO )
       LEFT JOIN CIDADES CI ON
         ( CI.CODIGO = CL.CIDADE AND
           CI.ESTADO = CL.ESTADO )
     WHERE
       CL.CODIGO = :CODCLIENTE
     INTO
       :CLI_NOME,
       :TEMP_RAZAOSOCIAL,
       :TEMP_PESSOAFISICA,
       :CLI_NUMERO,
       :CLI_COMPLEMENTO,
       :CLI_ESTADO,
       :CLI_FONE,
       :CLI_FAX,
       :CLI_EMAIL,
       :CLI_RGIE,
       :CLI_CPFCGC,
       :TEMP_IE,
       :TEMP_CGC,
       :CLI_LOGRADOURO,
       :CLI_BAIRRO,
       :CLI_CIDADE,
       :CLI_CEP;
     IF ( TEMP_PESSOAFISICA = 'J' ) THEN
      BEGIN
       CLI_NOME   = TEMP_RAZAOSOCIAL;
       CLI_RGIE   = TEMP_IE;
       CLI_CPFCGC = TEMP_CGC;
      END

     /* DADOS DA EMPRESA */
     SELECT
       CL.NOME,
       CL.RAZAOSOCIAL,
       CL.CGC,
       CL.IE,
       CL.LOGRADOURO,
       CL.NUMERO,
       CL.COMPLEMENTO,
       CL.BAIRRO,
       CL.CIDADE,
       CL.ESTADO,
       CL.CEP,
       CL.FONE
     FROM
       SISCONFIG SI
       JOIN REL_CLIENTES CL ON
         (SI.CODCLIENTE = CL.CODIGO)
     WHERE
       SI.CODIGO = :CODEMPRESA
     INTO
       :EMPRESA_NOME,
       :EMPRESA_RAZAOSOCIAL,
       :EMPRESA_CNPJ,
       :EMPRESA_IE,
       :EMPRESA_LOGRADOURO,
       :EMPRESA_NUMERO,
       :EMPRESA_COMPLEMENTO,
       :EMPRESA_BAIRRO,
       :EMPRESA_CIDADE,
       :EMPRESA_ESTADO,
       :EMPRESA_CEP,
       :EMPRESA_FONE;

     SELECT
       EXTENSO
     FROM
       MOEDAEXTENSO(CAST(:TOTAL_PAGO AS DOUBLE PRECISION))
     INTO
       :EXTENSO;

     SUSPEND;
   END
END!

ALTER PROCEDURE REL_NOTAPRO (
    CODMOVIMENTO INTEGER)
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(13) CHARACTER SET NONE,
    DESCRICAO1 VARCHAR(60) CHARACTER SET NONE,
    DESCRICAO2 VARCHAR(80) CHARACTER SET NONE,
    SERIE VARCHAR(20) CHARACTER SET NONE,
    VALOR_VENDA NUMERIC(9,2),
    ICMS_VENDA NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    QUANTIDADE NUMERIC(9,2),
    VALOR_PAGO NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    SITTRIBU CHAR(3) CHARACTER SET NONE,
    UNIDADE CHAR(2) CHARACTER SET NONE,
    VALOR_ITEM NUMERIC(9,2))
AS
DECLARE VARIABLE ES INTEGER;
BEGIN

   /* VERIFICO SE EH COMPRA OU VENDA */
   SELECT
     ES
   FROM
     MOVIMENTOS
   WHERE
     CODIGO = :CODMOVIMENTO
   INTO
     :ES;

   IF (ES = 1) THEN
    BEGIN

      /* COMPRA */
      FOR
      SELECT
        TI.CODPRODUTO,
        PO.BARRA,
        PO.DESCRICAO,
        PO.UNIDADE,
        'N/F',
        TI.VALOR_UNITARIO,
        TI.ICMSCOMPRA,
        TI.DESCONTO,
        TI.SITTRIBU,
        TI.QUANTIDADE,
        TI.VALOR_TOTAL,
        TI.VALOR_ICMSCOMPRA
      FROM
        TEMPITENS TI
        LEFT JOIN PRODUTOS PO ON
          ( PO.CODIGO = TI.CODPRODUTO )
      WHERE
        TI.CODMOVIMENTO = :CODMOVIMENTO
      INTO
        :CODIGO,
        :BARRA,
        :DESCRICAO1,
        :UNIDADE,
        :SERIE,
        :VALOR_VENDA,
        :ICMS_VENDA,
        :DESCONTO,
        :SITTRIBU,
        :QUANTIDADE,
        :VALOR_PAGO,
        :VALOR_ICMS
      DO
      BEGIN
        IF (SERIE <> 'N/F') THEN
           DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || SERIE;
        ELSE
           DESCRICAO2 = DESCRICAO1;
        VALOR_ITEM = VALOR_VENDA - DESCONTO;
        SUSPEND;
      END

    END ELSE
    BEGIN

      /* VENDA */
      FOR
      SELECT
        ID.CODPRODUTO,
        ID.BARRA,
        PO.DESCRICAO,
        PO.UNIDADE,
        ID.SERIE,
        ID.VALOR_VENDA,
        ID.ICMSVENDA,
        ID.DESCONTO,
        TI.SITTRIBU,
        SUM(ID.QUANTIDADE),
        SUM(ID.VALOR_PAGO),
        SUM(ID.VALOR_ICMS)
      FROM
        INDIVIDUAIS ID
        LEFT JOIN PRODUTOS PO ON
          ( PO.CODIGO = ID.CODPRODUTO )
        LEFT JOIN TEMPITENS TI ON
          ( TI.CODMOVIMENTO = ID.CODMOVENTRADA AND
            TI.CODPRODUTO   = ID.CODPRODUTO    AND
            TI.CODIGO       = ID.CODITEM )
      WHERE
        ID.CODMOVSAIDA = :CODMOVIMENTO AND
        ID.VENDIDO = 'S' AND
        ID.PS = 'P'
      GROUP BY
        ID.CODPRODUTO,
        ID.BARRA,
        PO.DESCRICAO,
        PO.UNIDADE,
        ID.SERIE,
        ID.VALOR_VENDA,
        ID.ICMSVENDA,
        ID.DESCONTO,
        TI.SITTRIBU
      INTO
        :CODIGO,
        :BARRA,
        :DESCRICAO1,
        :UNIDADE,
        :SERIE,
        :VALOR_VENDA,
        :ICMS_VENDA,
        :DESCONTO,
        :SITTRIBU,
        :QUANTIDADE,
        :VALOR_PAGO,
        :VALOR_ICMS
      DO
      BEGIN
        IF (SERIE <> 'N/F') THEN
           DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || SERIE;
        ELSE
           DESCRICAO2 = DESCRICAO1;
        VALOR_ITEM = VALOR_VENDA - DESCONTO;
        SUSPEND;
      END

   END

END!

DROP EXTERNAL FUNCTION F_LRTRIM!
DROP EXTERNAL FUNCTION F_LEFT!


/*
** SUBSTITUTAS DE F_STRINGLENGTH
*/

ALTER PROCEDURE WEBUPD_CLIENTES (
    NOME VARCHAR(40) CHARACTER SET NONE,
    RAZAOSOCIAL VARCHAR(40) CHARACTER SET NONE,
    CGC VARCHAR(20) CHARACTER SET NONE,
    IE VARCHAR(20) CHARACTER SET NONE,
    RG VARCHAR(20) CHARACTER SET NONE,
    CPF VARCHAR(20) CHARACTER SET NONE,
    PAI VARCHAR(40) CHARACTER SET NONE,
    MAE VARCHAR(40) CHARACTER SET NONE,
    LOGRADOURO VARCHAR(60) CHARACTER SET NONE,
    NUMERO INTEGER,
    COMPLEMENTO VARCHAR(40) CHARACTER SET NONE,
    BAIRRO VARCHAR(60) CHARACTER SET NONE,
    CIDADE VARCHAR(60) CHARACTER SET NONE,
    ESTADO CHAR(2) CHARACTER SET NONE,
    CEP VARCHAR(9) CHARACTER SET NONE,
    FONE VARCHAR(20) CHARACTER SET NONE,
    FAX VARCHAR(20) CHARACTER SET NONE,
    CELULAR VARCHAR(20) CHARACTER SET NONE,
    EMAIL VARCHAR(50) CHARACTER SET NONE,
    CODIGO INTEGER,
    OP INTEGER,
    CODEMPRESA INTEGER)
AS
DECLARE VARIABLE COD_ESTADO VARCHAR(30);
DECLARE VARIABLE COD_CIDADE INTEGER;
DECLARE VARIABLE COD_BAIRRO INTEGER;
DECLARE VARIABLE COD_LOGRADOURO INTEGER;
DECLARE VARIABLE NOMEUSER VARCHAR(30);
BEGIN

  /* FACO A VALIDACAO DOS DADOS PF/PJ */
  IF (((CPF > '') OR (RG > '')) AND ((CGC > '') OR (IE > ''))) THEN
    EXCEPTION PFPJ_INVALIDO;

  IF (UDF_LEN(CEP) < 8) THEN
    EXCEPTION CEP_INVALIDO;

  IF (FONE > '') THEN
   IF (NOT ((UDF_COPY(FONE, 1, 1) = '(') AND (UDF_COPY(FONE, 4, 1) = ')') AND
      (UDF_COPY(FONE, 9, 1) = '-'))) THEN
    EXCEPTION FONE_INVALIDO;

  IF (FAX > '') THEN
   IF (NOT ((UDF_COPY(FAX, 1, 1) = '(') AND (UDF_COPY(FAX, 4, 1) = ')') AND
      (UDF_COPY(FAX, 9, 1) = '-'))) THEN
    EXCEPTION FAX_INVALIDO;

  IF (CELULAR > '') THEN
   IF (NOT ((UDF_COPY(CELULAR, 1, 1) = '(') AND (UDF_COPY(CELULAR, 4, 1) = ')') AND
      (UDF_COPY(CELULAR, 9, 1) = '-'))) THEN
    EXCEPTION CELULAR_INVALIDO;

  /* DESCUBRO O CODIGO DO ESTADO */
  SELECT
    ESTADO
  FROM
    ESTADOS
  WHERE
    SIGLA = :ESTADO
  INTO
    :COD_ESTADO;

  /* SE O ESTADO NAO EXISTIR, GERO ERRO */
  IF (COD_ESTADO IS NULL) THEN
    EXCEPTION ESTADO_INVALIDO;

  /* DESCUBRO O CODIGO DA CIDADE */
  SELECT
    CODIGO
  FROM
    CIDADES
  WHERE
    CIDADE = :CIDADE AND
    ESTADO = :ESTADO
  INTO
    :COD_CIDADE;

  /* SE A CIDADE NAO EXISTIR, GERO ERRO */
  IF (COD_ESTADO IS NULL) THEN
    EXCEPTION CIDADE_INVALIDA;

  /* VERIFICO A EXISTENCIA DO BAIRRO */
  SELECT
    CODIGO
  FROM
    BAIRROS
  WHERE
    BAIRRO = :BAIRRO AND
    CIDADE = :COD_CIDADE AND
    ESTADO = :ESTADO
  INTO
    :COD_BAIRRO;

  /* SE O BAIRRO NAO EXISTIR, DEVO CADASTRA-LO */
  IF (COD_BAIRRO IS NULL) THEN
   BEGIN

     SELECT
       SEQUENCIA
     FROM
       SEQ_OBTER('BAIRROS')
     INTO
       :COD_BAIRRO;

     INSERT INTO
       BAIRROS (
         CODIGO,
         BAIRRO,
         CIDADE,
         ESTADO)
       VALUES (
         :COD_BAIRRO,
         :BAIRRO,
         :COD_CIDADE,
         :ESTADO);

   END

  /* VERIFICO A EXISTENCIA DO LOGRADOURO */
  SELECT
    CODIGO
  FROM
    LOGRADOUROS
  WHERE
    LOGRADOURO = :LOGRADOURO AND
    BAIRRO = :COD_BAIRRO AND
    CIDADE = :COD_CIDADE AND
    ESTADO = :ESTADO
  INTO
    :COD_LOGRADOURO;

  /* SE NAO EXISTIR, CADASTRO O LOGRADOURO */
  IF (COD_LOGRADOURO IS NULL) THEN
   BEGIN

     SELECT
       SEQUENCIA
     FROM
       SEQ_OBTER('LOGRADOUROS')
     INTO
       :COD_LOGRADOURO;

     INSERT INTO
       LOGRADOUROS (
        CODIGO,
        LOGRADOURO,
        BAIRRO,
        CEP,
        CIDADE,
        ESTADO,
        EXTENSO)
       VALUES (
        :COD_LOGRADOURO,
        :LOGRADOURO,
        :COD_BAIRRO,
        :CEP,
        :COD_CIDADE,
        :ESTADO,
        :LOGRADOURO);

   END

  /* VERIFICO A OPERACAO 1=ATUALIZAR, SENAO, CADASTRAR */
  IF (OP = 1) THEN
   BEGIN

     UPDATE
       CLIENTES
     SET
       NOME        = :NOME,
       RAZAOSOCIAL = :RAZAOSOCIAL,
       CGC         = :CGC,
       IE          = :IE,
       RG          = :RG,
       CPF         = :CPF,
       PAI         = :PAI,
       MAE         = :MAE,
       LOCALIZACAO = :COD_LOGRADOURO,
       NUMERO      = :NUMERO,
       COMPLEMENTO = :COMPLEMENTO,
       BAIRRO      = :COD_BAIRRO,
       CIDADE      = :COD_CIDADE,
       ESTADO      = :ESTADO,
       FONE        = :FONE,
       FAX         = :FAX,
       CELULAR     = :CELULAR,
       EMAIL       = :EMAIL
     WHERE
       CODIGO      = :CODIGO;

   END ELSE
   BEGIN

     NOMEUSER = 'CLI' || CODIGO;

     INSERT INTO
       CLIENTES (
         CODIGO,
	 NOME,
         RAZAOSOCIAL,
         CGC,
         IE,
         RG,
         CPF,
         PAI,
         MAE,
         LOCALIZACAO,
         NUMERO,
         COMPLEMENTO,
         BAIRRO,
         CIDADE,
         ESTADO,
         FONE,
         FAX,
         CELULAR,
         EMAIL,
	 SALARIO,
	 COMISSAO,
	 NOMEUSER,
	 TIPO,
	 CODEMPRESA)
       VALUES (
         :CODIGO,
         :NOME,
         :RAZAOSOCIAL,
         :CGC,
         :IE,
         :RG,
         :CPF,
         :PAI,
         :MAE,
         :COD_LOGRADOURO,
         :NUMERO,
         :COMPLEMENTO,
         :COD_BAIRRO,
         :COD_CIDADE,
         :ESTADO,
         :FONE,
         :FAX,
         :CELULAR,
         :EMAIL,
	 0,
	 0,
	 :NOMEUSER,
	 'C',
	 :CODEMPRESA);

   END

END!

DROP EXTERNAL FUNCTION F_STRINGLENGTH!
DROP EXTERNAL FUNCTION F_MID!
DROP EXTERNAL FUNCTION F_TRUNCATE!


/*
** TRIGGERS QUE DEPENDEM DAS PROCEDURES
*/

ALTER TRIGGER MOVIMENTOS_AFTINS
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
  IF (NEW.ES IN (1, 2)) THEN
    IF (NEW.VALOR_TOTAL > 0) THEN
      EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
END!

ALTER TRIGGER MOVIMENTOS_AFTUPD
ACTIVE AFTER UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ES IN (1, 2)) THEN
   BEGIN
     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO)) AND
        (NEW.TIPO IN (1, 2, 5))) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
           EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);
   END
  IF ((NEW.TIPO = 9) OR (NEW.VALOR_TOTAL = 0)) THEN
     DELETE FROM PAGAMENTOS WHERE CODMOVIMENTO = NEW.CODIGO AND
       PAGO = 0;
END!

ALTER TRIGGER CLIENTE_FAMILIA_INSERT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  /* NOME DE FAMILIA */
  IF (NEW.PESSOAFISICA = 'F') THEN
     EXECUTE PROCEDURE FAMILIA(NEW.NOME)
       RETURNING_VALUES NEW.NOME_FAMILIA;
  ELSE
     NEW.NOME_FAMILIA = NEW.NOME;
END!

ALTER TRIGGER CLIENTE_FAMILIA_UPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DE FAMILIA */
  IF (NEW.PESSOAFISICA = 'F') THEN
     EXECUTE PROCEDURE FAMILIA(NEW.NOME)
       RETURNING_VALUES NEW.NOME_FAMILIA;
  ELSE
     NEW.NOME_FAMILIA = NEW.NOME;
END!


/*
** EXCLUO AS FUNÇÕES SOUNDBYTES (DESCONTINUADO)
*/

DROP TRIGGER LOGRADOURO_SOUND_INSERT!
DROP TRIGGER LOGRADOURO_SOUND_UPDATE!

DROP EXTERNAL FUNCTION SOUND60BYTES!

DROP TRIGGER CLIENTE_SOUND_INSERT!
DROP TRIGGER CLIENTE_SOUND_UPDATE!

DROP EXTERNAL FUNCTION SOUNDBYTES!


/*
** EXCLUO AS VALIDAÇÕES DE CNPJ E CPF (RETORNO FUTURO)
*/

DROP TRIGGER CLIENTE_INSDOC!
DROP TRIGGER CLIENTE_UPDDOC!

DROP EXTERNAL FUNCTION F_TESTACGC!
DROP EXTERNAL FUNCTION F_TESTACPF!


/*
** VALIDAÇÃO DE CÓDIGO DE BARRAS EAN13
*/

CREATE PROCEDURE CALC_EAN13 (
    CODI VARCHAR(14) CHARACTER SET NONE)
RETURNS (
    RESULTADO VARCHAR(13) CHARACTER SET NONE)
AS
DECLARE VARIABLE SOMA SMALLINT;
DECLARE VARIABLE I SMALLINT;
DECLARE VARIABLE X SMALLINT;
BEGIN

  SOMA = 0;

  I = 0;
  WHILE (I < 12) DO
   BEGIN

    X = UDF_ORD(UDF_COPY(CODI, I + 1, 1)) - 48;

    IF (UDF_ODD(I) = 1) THEN
      SOMA = SOMA + (X * 3);
    ELSE
      SOMA = SOMA + X;

    I = I + 1;

   END

  SOMA = 10 - (UDF_MOD(SOMA, 10));

  IF (SOMA = 10) THEN
    SOMA = 0;

  SOMA = SOMA + 48;

  RESULTADO = UDF_COPY(CODI, 1, 12) || UDF_CHR(SOMA);

  SUSPEND;
END!

GRANT EXECUTE ON PROCEDURE CALC_EAN13 TO PUBLIC!

ALTER TRIGGER VERIFICA_BARRA_INS
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE TEMP_EAN VARCHAR(13);
BEGIN
   IF (NEW.INDIVIDUAL = 'N') THEN
    BEGIN
     EXECUTE PROCEDURE CALC_EAN13(NEW.BARRA)
       RETURNING_VALUES :TEMP_EAN;
     IF (NEW.BARRA <> TEMP_EAN) THEN
        EXCEPTION PRODUTO_BARRA;
    END
   IF (NEW.PRECOVENDA <= 0) THEN
      EXCEPTION VALOR_ZERO;
END!

ALTER TRIGGER VERIFICA_BARRA_UPD
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE TEMP_EAN VARCHAR(13);
BEGIN
   IF (NEW.INDIVIDUAL = 'N') THEN
    BEGIN
     EXECUTE PROCEDURE CALC_EAN13(NEW.BARRA)
       RETURNING_VALUES :TEMP_EAN;
     IF (NEW.BARRA <> TEMP_EAN) THEN
        EXCEPTION PRODUTO_BARRA;
    END
   IF (NEW.PRECOVENDA <= 0) THEN
      EXCEPTION VALOR_ZERO;
END!

ALTER TRIGGER ORSOMA_INS
ACTIVE AFTER INSERT POSITION 0
AS
   DECLARE VARIABLE SOMA          NUMERIC(9,2);
   DECLARE VARIABLE CODIGO        INTEGER;
   DECLARE VARIABLE ES            CHAR(1);
   DECLARE VARIABLE TIPO          CHAR(1);
   DECLARE VARIABLE ETIQUETA      CHAR(1);
   DECLARE VARIABLE NUMETIQ       INTEGER;
   DECLARE VARIABLE INDIVIDUAL    CHAR(1);
   DECLARE VARIABLE SEQUENCIA     INTEGER;
   DECLARE VARIABLE SEQUENSTR     CHAR(4);
   DECLARE VARIABLE N             INTEGER;
   DECLARE VARIABLE C             INTEGER;
   DECLARE VARIABLE BARRA         CHAR(14);
   DECLARE VARIABLE BARRA_TEMP    CHAR(14);
   DECLARE VARIABLE PS            CHAR(1);
   DECLARE VARIABLE EMPRESA       INTEGER;
   DECLARE VARIABLE CUSTO_PRODUTO NUMERIC(9, 2);
   DECLARE VARIABLE CUSTO_IPI     NUMERIC(9, 2);
BEGIN

  /* RECUPERO O CODIGO DE BARRAS E O TIPO (PRODUTO, SERVIÇO */
  SELECT
    BARRA,
    PS
  FROM
    PRODUTOS
  WHERE
    CODIGO = NEW.CODPRODUTO
  INTO
    :BARRA,
    :PS;

  /* SE NAO TIVER CODIGO DE BARRAS GERO ERRO */
  IF (BARRA = '0000000000000') THEN
    EXCEPTION BARRA_NECESSARIA;

  /* VERIFICO SE EH PRODUTO OU SERVIÇO */
  IF (PS = 'P') THEN
   BEGIN

     /* PRODUTO */

     /* GUARDO O CODIGO DO MOVIMENTO */
     CODIGO = NEW.CODMOVIMENTO;

     /* RECUPERO O TIPO E A EMPRESA */
     SELECT
       ES,
       TIPO,
       CODEMPRESA
     FROM
       MOVIMENTOS
     WHERE
       CODIGO = :CODIGO
     INTO
       :ES,
       :TIPO,
       :EMPRESA;

     /* SE FOR COMPRA */
     IF ((ES = 1) AND (TIPO = 1)) THEN
      BEGIN

        /* ATUALIZO O PREÇO DE CUSTO */
        UPDATE
          PRODUTOS
        SET
          PRECOCUSTO = NEW.VALOR_UNITARIO
        WHERE
          CODIGO = NEW.CODPRODUTO;

        /* VERIFICO SE PRECISO REAJUSTAR O PREÇO DE VENDA */
        IF (NEW.REAJUSTAR = 'S') THEN
          /* REAJUSTO O PREÇO DE VENDA */
          UPDATE
            PRODUTOS
          SET
            PRECOVENDA = NEW.VALOR_VENDA,
            ICMS = NEW.ICMSVENDA
          WHERE
            CODIGO = NEW.CODPRODUTO;

        /* RECUPERO DADOS DO PRODUTO PARA GERAÇAO */
        SELECT
          ETIQUETA,
          INDIVIDUAL,
          SEQUENCIA,
          BARRA
        FROM
          PRODUTOS
        WHERE
          CODIGO = NEW.CODPRODUTO
        INTO
          :ETIQUETA,
          :INDIVIDUAL,
          :SEQUENCIA,
          :BARRA;

        /* ZERO O CONTADOR */
        N = 0;

        /* CALCULO O CUSTO DO PRODUTO, IPI */
        CUSTO_PRODUTO = (NEW.VALOR_UNITARIO - NEW.DESCONTO);
        CUSTO_IPI = (CUSTO_PRODUTO * (NEW.IPI / 100));

        /* SE O PRODUTO FOR INDIVIDUAL */
        IF (INDIVIDUAL = 'S') THEN
         BEGIN

           /* EXECUTO A MESMA SEQUENCIA PARA CADA ITEM */
           WHILE (N < NEW.QUANTIDADE) DO
            BEGIN

              /* INCREMENTO O CONTADOR */
              N = N + 1;

              /* INCREMENTO O CODIGO SEQUENCIAL DO PRODUTO */
              SEQUENCIA = SEQUENCIA + 1;

              /* GERO A SEQUENCIA EM FORMATO STRING, ALINHADO A DIREITA */
              IF (SEQUENCIA > 99) THEN SEQUENSTR = ('0' || SEQUENCIA);
               ELSE IF (SEQUENCIA > 9) THEN SEQUENSTR = ('00' || SEQUENCIA);
                ELSE IF (SEQUENCIA > 0) THEN SEQUENSTR = ('000' || SEQUENCIA);
                 ELSE SEQUENSTR = '0000';

              /* GERO O CODIGO DE BARRAS INDIVIDUAL */
              BARRA_TEMP = '999' || NEW.CODPRODUTO || SEQUENSTR || '0';
              EXECUTE PROCEDURE CALC_EAN13(:BARRA_TEMP)
                RETURNING_VALUES :BARRA;

              /* RECUPERO A SEQUENCIA DE GRAVAÇAO DA TABELA */
              EXECUTE PROCEDURE SEQ_OBTER 'INDIVIDUAIS'
                RETURNING_VALUES C;

              /* GRAVO O ITEM NA TABELA */
              INSERT INTO
                INDIVIDUAIS (
                  CODIGO,
                  CODITEM,
                  CODPRODUTO,
                  CODMOVENTRADA,
                  SEQUENCIA,
                  ICMSVENDA,
                  VALOR_VENDA,
                  IMPETIQ,
                  QUANTIDADE,
                  UNICO,
                  BARRA,
                  CODEMPRESA,
                  CUSTO_PRODUTO,
                  CUSTO_IPI)
                VALUES (
                  :C,
                  NEW.CODIGO,
                  NEW.CODPRODUTO,
                  NEW.CODMOVIMENTO,
                  :SEQUENSTR,
                  NEW.ICMSVENDA,
                  NEW.VALOR_VENDA,
                  :ETIQUETA,
                  1,
                  1,
                  :BARRA,
                  :EMPRESA,
                  :CUSTO_PRODUTO,
                  :CUSTO_IPI);

            END /* WHILE */

           /* ATUALIZO A SEQUENCIA DO PRODUTO UTILIZADA */
           UPDATE
             PRODUTOS
           SET
             SEQUENCIA = (SEQUENCIA + NEW.QUANTIDADE)
           WHERE
             CODIGO = NEW.CODPRODUTO;

         END ELSE
         /* PRODUTO COMUM - NAO INDIVIDUAL */
         BEGIN

           /* RECUPERO A SEQUENCIA DA TABELA */
           EXECUTE PROCEDURE SEQ_OBTER 'INDIVIDUAIS'
             RETURNING_VALUES C;

           /* GRAVO OS DADOS NA TABELA */
           INSERT INTO
             INDIVIDUAIS (
               CODIGO,
               CODITEM,
               CODPRODUTO,
               CODMOVENTRADA,
               SEQUENCIA,
               ICMSVENDA,
               VALOR_VENDA,
               IMPETIQ,
               QUANTIDADE,
               UNICO,
               BARRA,
               CODEMPRESA,
               CUSTO_PRODUTO,
               CUSTO_IPI)
             VALUES (
               :C,
               NEW.CODIGO,
               NEW.CODPRODUTO,
               NEW.CODMOVIMENTO,
               '0000',
               NEW.ICMSVENDA,
               NEW.VALOR_VENDA,
               :ETIQUETA,
               NEW.QUANTIDADE,
               0,
               :BARRA,
               :EMPRESA,
               :CUSTO_PRODUTO,
               :CUSTO_IPI);

         END
      END

     if (es in (0, 1)) then
        /* ATUALIZO O VALOR DOS ITENS E DO IPI */
        UPDATE
          MOVIMENTOS
        SET
          VALOR_ITENS = VALOR_ITENS + NEW.VALOR_TOTAL,
          VALOR_IPI_PRODUTOS = VALOR_IPI_PRODUTOS + NEW.VALOR_IPI
        WHERE
          CODIGO = :CODIGO;

   END

END!

DROP EXTERNAL FUNCTION EAN!
DROP EXTERNAL FUNCTION F_ROUNDFLOAT!

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (106, CURRENT_TIMESTAMP)!