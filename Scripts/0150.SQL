/*
** TEMPO FORA DO PRAZO
*/

ALTER TABLE MOVIMENTOS ADD TEMPO_FORADOPRAZO DOUBLEPRES;

SET TERM ^ ;

ALTER TRIGGER STATUS_UPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
BEGIN
   IF (NEW.TIPO = 0) THEN NEW.STATUS = 'ORÇAMENTO';
   IF (NEW.TIPO = 1) THEN NEW.STATUS = 'COMPRA';
   IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA';
   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRE ASSITENCIA';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';
      NEW.USUARIOFECHAMENTO = USER;

      /* TOTAL DA COMISSAO */
      SELECT
        SUM(VALOR_COMISSAO)
      FROM
        INDIVIDUAIS
      WHERE
        CODMOVSAIDA = OLD.CODIGO AND
        VENDIDO = 'S'
      INTO
        NEW.VALOR_COMISSAO;

      IF (NEW.VALOR_COMISSAO IS NULL) THEN
        NEW.VALOR_COMISSAO = 0.0;

      /* calcular impostos */
      IF (NEW.NOTA_NUMERO IS NOT NULL) THEN
       BEGIN

         /* TOTAL ICMS */
         SELECT
           SUM(TOTAL_ICMS)
         FROM
           INDIVIDUAIS
         WHERE
           CODMOVSAIDA = NEW.CODIGO
         INTO
           NEW.VALOR_ICMS;

       END

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

         NEW.TEMPO_CHEGADA    = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_CONCLUSAO  = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_TECNICOS = TOTAL;

         NEW.DATAINICIO  = PRIMEIRO;

         NEW.DATATERMINO = ULTIMO;

         IF (PRIMEIRO > NEW.DATAPREVISAO) THEN
           NEW.TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(NEW.DATAPREVISAO, PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
         ELSE
           NEW.TEMPO_FORADOPRAZO = 0;

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END

^

SET TERM ; ^

SET TERM ^ ;

CREATE PROCEDURE PREENCHE_TEMPOS 
AS
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE DATA TIMESTAMP;
DECLARE VARIABLE DATAFECHAMENTO TIMESTAMP;
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
DECLARE VARIABLE TEMPO_CHEGADA DOUBLE PRECISION;
DECLARE VARIABLE TEMPO_CONCLUSAO DOUBLE PRECISION;
DECLARE VARIABLE TEMPO_LANCAMENTO DOUBLE PRECISION;
DECLARE VARIABLE TEMPO_FORADOPRAZO DOUBLE PRECISION;
DECLARE VARIABLE DATAINICIO TIMESTAMP;
DECLARE VARIABLE DATATERMINO TIMESTAMP;
DECLARE VARIABLE DATAPREVISAO TIMESTAMP;
begin

  for
  select
    codigo,
    data,
    datafechamento,
    dataprevisao
  from
    movimentos
  where
    tipo = 3
  into
    :codigo,
    :data,
    :datafechamento,
    :dataprevisao
  do
  begin

    SELECT
      MIN(DATAINI),
      MAX(DATAFIM),
      SUM(THORAS)
    FROM
      OS_VENDER
    WHERE
      CODMOVIMENTO = :CODIGO
    INTO
      :PRIMEIRO,
      :ULTIMO,
      :TOTAL;

    IF (PRIMEIRO IS NULL) THEN
     BEGIN
      TEMPO_CHEGADA     = NULL;
      TEMPO_CONCLUSAO   = NULL;
      TEMPO_LANCAMENTO  = NULL;
      DATAINICIO        = NULL;
      DATATERMINO       = NULL;
      TEMPO_FORADOPRAZO = NULL;
     END ELSE
     BEGIN
      TEMPO_CHEGADA = CAST(
           UDF_MINUTESBETWEEN(:DATA, :PRIMEIRO)
           AS DOUBLE PRECISION) / 60;
      TEMPO_CONCLUSAO = CAST(
           UDF_MINUTESBETWEEN(:DATA, :ULTIMO)
           AS DOUBLE PRECISION) / 60;
      TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(:ULTIMO, :DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;
      IF (PRIMEIRO > DATAPREVISAO) THEN
        TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(:DATAPREVISAO, :PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
      ELSE
        TEMPO_FORADOPRAZO = 0;
      DATAINICIO  = :PRIMEIRO;
      DATATERMINO = :ULTIMO;
     END

    UPDATE
      MOVIMENTOS
    SET
      TEMPO_CHEGADA = :TEMPO_CHEGADA,
      TEMPO_CONCLUSAO = :TEMPO_CONCLUSAO,
      TEMPO_LANCAMENTO = :TEMPO_LANCAMENTO,
      TEMPO_TECNICOS = :TOTAL,
      DATAINICIO  = :DATAINICIO,
      DATATERMINO = :DATATERMINO,
      TEMPO_FORADOPRAZO = :TEMPO_FORADOPRAZO,
      TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(:DATA, :DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60
    WHERE
      CODIGO = :CODIGO;

  end

end

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_VENDEDOR_UPD
INACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DO VENDEDOR */
  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = NEW.CODVENDEDOR
  INTO
    NEW.NOME_VENDEDOR;
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER STATUS_UPDATE
INACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
BEGIN
   IF (NEW.TIPO = 0) THEN NEW.STATUS = 'ORÇAMENTO';
   IF (NEW.TIPO = 1) THEN NEW.STATUS = 'COMPRA';
   IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA';
   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRE ASSITENCIA';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';
      NEW.USUARIOFECHAMENTO = USER;

      /* TOTAL DA COMISSAO */
      SELECT
        SUM(VALOR_COMISSAO)
      FROM
        INDIVIDUAIS
      WHERE
        CODMOVSAIDA = OLD.CODIGO AND
        VENDIDO = 'S'
      INTO
        NEW.VALOR_COMISSAO;

      IF (NEW.VALOR_COMISSAO IS NULL) THEN
        NEW.VALOR_COMISSAO = 0.0;

      /* calcular impostos */
      IF (NEW.NOTA_NUMERO IS NOT NULL) THEN
       BEGIN

         /* TOTAL ICMS */
         SELECT
           SUM(TOTAL_ICMS)
         FROM
           INDIVIDUAIS
         WHERE
           CODMOVSAIDA = NEW.CODIGO
         INTO
           NEW.VALOR_ICMS;

       END

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

         IF (PRIMEIRO IS NULL) THEN
          BEGIN

            NEW.TEMPO_CHEGADA    = NULL;

            NEW.TEMPO_CONCLUSAO  = NULL;

            NEW.TEMPO_LANCAMENTO = NULL;

            NEW.TEMPO_TECNICOS   = NULL;

            NEW.DATAINICIO       = NULL;

            NEW.DATATERMINO      = NULL;

          END ELSE
          BEGIN

            NEW.TEMPO_CHEGADA    = CAST(
              UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
              AS DOUBLE PRECISION) / 60;

            NEW.TEMPO_CONCLUSAO  = CAST(
              UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
              AS DOUBLE PRECISION) / 60;

            NEW.TEMPO_LANCAMENTO = CAST(
              UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
              AS DOUBLE PRECISION) / 60;

            NEW.TEMPO_TECNICOS = TOTAL;

            NEW.DATAINICIO  = PRIMEIRO;

            NEW.DATATERMINO = ULTIMO;

          END

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
INACTIVE AFTER UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ES IN (1, 2)) THEN
   BEGIN
     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO)) AND
        (NEW.TIPO IN (1, 2, 5))) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
           EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);
   END
  IF ((NEW.TIPO = 9) OR (NEW.VALOR_TOTAL = 0)) THEN
     DELETE FROM PAGAMENTOS WHERE CODMOVIMENTO = NEW.CODIGO AND
       PAGO = 0;
END

^

SET TERM ; ^

COMMIT;

EXECUTE PROCEDURE PREENCHE_TEMPOS;

COMMIT;

DROP PROCEDURE PREENCHE_TEMPOS;

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_VENDEDOR_UPD
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DO VENDEDOR */
  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = NEW.CODVENDEDOR
  INTO
    NEW.NOME_VENDEDOR;
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER STATUS_UPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
BEGIN
   IF (NEW.TIPO = 0) THEN NEW.STATUS = 'ORÇAMENTO';
   IF (NEW.TIPO = 1) THEN NEW.STATUS = 'COMPRA';
   IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA';
   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRE ASSITENCIA';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';
      NEW.USUARIOFECHAMENTO = USER;

      /* TOTAL DA COMISSAO */
      SELECT
        SUM(VALOR_COMISSAO)
      FROM
        INDIVIDUAIS
      WHERE
        CODMOVSAIDA = OLD.CODIGO AND
        VENDIDO = 'S'
      INTO
        NEW.VALOR_COMISSAO;

      IF (NEW.VALOR_COMISSAO IS NULL) THEN
        NEW.VALOR_COMISSAO = 0.0;

      /* calcular impostos */
      IF (NEW.NOTA_NUMERO IS NOT NULL) THEN
       BEGIN

         /* TOTAL ICMS */
         SELECT
           SUM(TOTAL_ICMS)
         FROM
           INDIVIDUAIS
         WHERE
           CODMOVSAIDA = NEW.CODIGO
         INTO
           NEW.VALOR_ICMS;

       END

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

         IF (PRIMEIRO IS NULL) THEN
          BEGIN

            NEW.TEMPO_CHEGADA    = NULL;

            NEW.TEMPO_CONCLUSAO  = NULL;

            NEW.TEMPO_LANCAMENTO = NULL;

            NEW.TEMPO_TECNICOS   = NULL;

            NEW.DATAINICIO       = NULL;

            NEW.DATATERMINO      = NULL;

          END ELSE
          BEGIN

            NEW.TEMPO_CHEGADA    = CAST(
              UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
              AS DOUBLE PRECISION) / 60;

            NEW.TEMPO_CONCLUSAO  = CAST(
              UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
              AS DOUBLE PRECISION) / 60;

            NEW.TEMPO_LANCAMENTO = CAST(
              UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
              AS DOUBLE PRECISION) / 60;

            NEW.TEMPO_TECNICOS = TOTAL;

            NEW.DATAINICIO  = PRIMEIRO;

            NEW.DATATERMINO = ULTIMO;

          END

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
ACTIVE AFTER UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ES IN (1, 2)) THEN
   BEGIN
     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO)) AND
        (NEW.TIPO IN (1, 2, 5))) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
           EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);
   END
  IF ((NEW.TIPO = 9) OR (NEW.VALOR_TOTAL = 0)) THEN
     DELETE FROM PAGAMENTOS WHERE CODMOVIMENTO = NEW.CODIGO AND
       PAGO = 0;
END

^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (150, CURRENT_TIMESTAMP);

COMMIT;