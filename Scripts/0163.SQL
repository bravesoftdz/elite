/*
** VALIDACAO DE CNPJ E CPF
*/

SET TERM ^ ;

CREATE PROCEDURE VALIDA_CNPJ (
    CNPJ VARCHAR(20))
RETURNS (
    RESULTADO INTEGER)
AS
DECLARE VARIABLE XCNPJ VARCHAR(20);
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE SOMA INTEGER;
DECLARE VARIABLE DIGITO INTEGER;
DECLARE VARIABLE MULTS VARCHAR(40);
BEGIN

  /* MULTIPLICADORES */
  MULTS = '06,05,04,03,02,09,08,07,06,05,04,03,02';

  /* RETORNA VERDADEIRO PADRAO */
  RESULTADO = 1;

  /* RETIRO OS PONTOS, TRAÇOS, ETC */
  CNPJ = UDF_TRIM(CNPJ);
  XCNPJ = '';
  N = 0;
  WHILE (N < UDF_LEN(CNPJ)) DO
   BEGIN
     IF (UDF_COPY(CNPJ, N, 1) BETWEEN '0' AND '9') THEN
       XCNPJ = XCNPJ || UDF_COPY(CNPJ, N, 1);
     N = N + 1;
   END

  /* SE FOR EM BRANCO TERMINO */
  IF (XCNPJ = '') THEN
   BEGIN
     SUSPEND;
     EXIT;
   END

  /* PREENCHO AS POSICOES ESQUERDAS COM ZEROS ATE 14 */
  XCNPJ = UDF_PADL(XCNPJ, '0', 14);

  /* PRIMEIRO DIGITO */

  /* CALCULO A SOMA */
  SOMA = 0;
  N = 12;
  WHILE (N >= 1) DO
   BEGIN
     SOMA = SOMA + CAST(UDF_COPY(XCNPJ, N - 1, 1) AS INTEGER) *
       CAST(UDF_COPY(MULTS, N * 3, 2) AS INTEGER);
     N = N - 1;
   END

  /* MODULO */
  IF ((11 - UDF_MOD(SOMA, 11)) IN (10, 11)) THEN
    DIGITO = 0;
  ELSE
    DIGITO = 11 - UDF_MOD(SOMA, 11);

  /* VERIFICA SE BATE COM O DIGITO 13 */
  IF (DIGITO <> CAST(UDF_COPY(XCNPJ, 12, 1) AS INTEGER)) THEN
   BEGIN
     RESULTADO = 0;
     SUSPEND;
     EXIT;
   END

  /* SEGUNDO DIGITO */

  /* CALCULO A SOMA */
  SOMA = 0;
  N = 13;
  WHILE (N >= 1) DO
   BEGIN
     SOMA = SOMA + CAST(UDF_COPY(XCNPJ, N - 1, 1) AS INTEGER) *
       CAST(UDF_COPY(MULTS, (N - 1) * 3, 2) AS INTEGER);
     N = N - 1;
   END

  /* MODULO */
  IF ((11 - UDF_MOD(SOMA, 11)) IN (10, 11)) THEN
    DIGITO = 0;
  ELSE
    DIGITO = 11 - UDF_MOD(SOMA, 11);

  /* VERIFICA SE BATE COM O DIGITO 14 */
  IF (DIGITO <> CAST(UDF_COPY(XCNPJ, 13, 1) AS INTEGER)) THEN
     RESULTADO = 0;

  SUSPEND;
END


^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE VALIDA_CNPJ TO PUBLIC;

SET TERM ^ ;

CREATE PROCEDURE VALIDA_CPF (
    CPF VARCHAR(20))
RETURNS (
    RESULTADO INTEGER)
AS
DECLARE VARIABLE XCPF VARCHAR(20);
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE SOMA INTEGER;
DECLARE VARIABLE DIGITO INTEGER;
DECLARE VARIABLE MULTS VARCHAR(30);
BEGIN

  /* MULTIPLICADORES */
  MULTS = '11,10,09,08,07,06,05,04,03,02';

  /* RETORNA VERDADEIRO PADRAO */
  RESULTADO = 1;

  /* RETIRO OS PONTOS, TRAÇOS, ETC */
  CPF = UDF_TRIM(CPF);
  XCPF = '';
  N = 0;
  WHILE (N < UDF_LEN(CPF)) DO
   BEGIN
     IF (UDF_COPY(CPF, N, 1) BETWEEN '0' AND '9') THEN
       XCPF = XCPF || UDF_COPY(CPF, N, 1);
     N = N + 1;
   END

  /* SE FOR EM BRANCO TERMINO */
  IF (XCPF = '') THEN
   BEGIN
     SUSPEND;
     EXIT;
   END

  /* PREENCHO AS POSICOES ESQUERDAS COM ZEROS ATE 11 */
  XCPF = UDF_PADL(XCPF, '0', 11);

  /* PRIMEIRO DIGITO */

  /* CALCULO A SOMA */
  SOMA = 0;
  N = 9;
  WHILE (N >= 1) DO
   BEGIN
     SOMA = SOMA + CAST(UDF_COPY(XCPF, N - 1, 1) AS INTEGER) *
       CAST(UDF_COPY(MULTS, N * 3, 2) AS INTEGER);
     N = N - 1;
   END

  /* MODULO */
  IF ((11 - UDF_MOD(SOMA, 11)) IN (10, 11)) THEN
    DIGITO = 0;
  ELSE
    DIGITO = 11 - UDF_MOD(SOMA, 11);

  /* VERIFICA SE BATE COM O DIGITO 10 */
  IF (DIGITO <> CAST(UDF_COPY(XCPF, 9, 1) AS INTEGER)) THEN
   BEGIN
     RESULTADO = 0;
     EXIT;
   END

  /* SEGUNDO DIGITO */

  /* CALCULO A SOMA */
  SOMA = 0;
  N = 10;
  WHILE (N >= 1) DO
   BEGIN
     SOMA = SOMA + CAST(UDF_COPY(XCPF, N - 1, 1) AS INTEGER) *
       CAST(UDF_COPY(MULTS, (N - 1) * 3, 2) AS INTEGER);
     N = N - 1;
   END

  /* MODULO */
  IF ((11 - UDF_MOD(SOMA, 11)) IN (10, 11)) THEN
    DIGITO = 0;
  ELSE
    DIGITO = 11 - UDF_MOD(SOMA, 11);

  /* VERIFICA SE BATE COM O DIGITO 11 */
  IF (DIGITO <> CAST(UDF_COPY(XCPF, 10, 1) AS INTEGER)) THEN
     RESULTADO = 0;

  SUSPEND;
END

^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE VALIDA_CPF TO PUBLIC;

SET TERM ^ ;

CREATE TRIGGER CLIENTES_DOC FOR CLIENTES
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE RETORNO INTEGER;
begin

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

end

^

SET TERM ; ^

SET TERM ^ ;

CREATE TRIGGER CLIENTES_DOCUPD FOR CLIENTES
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE RETORNO INTEGER;
begin

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

end

^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE VALIDA_CNPJ (
    CNPJ VARCHAR(20))
RETURNS (
    RESULTADO INTEGER)
AS
DECLARE VARIABLE XCNPJ VARCHAR(20);
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE SOMA INTEGER;
DECLARE VARIABLE DIGITO INTEGER;
DECLARE VARIABLE MULTS VARCHAR(40);
BEGIN

  /* MULTIPLICADORES */
  MULTS = '06,05,04,03,02,09,08,07,06,05,04,03,02';

  /* RETORNA VERDADEIRO PADRAO */
  RESULTADO = 1;

  /* RETIRO OS PONTOS, TRAÇOS, ETC */
  CNPJ = UDF_TRIM(CNPJ);
  XCNPJ = '';
  N = 0;
  WHILE (N < UDF_LEN(CNPJ)) DO
   BEGIN
     IF (UDF_COPY(CNPJ, N + 1, 1) BETWEEN '0' AND '9') THEN
       XCNPJ = XCNPJ || UDF_COPY(CNPJ, N + 1, 1);
     N = N + 1;
   END

  /* SE FOR EM BRANCO TERMINO */
  IF (XCNPJ = '') THEN
   BEGIN
     SUSPEND;
     EXIT;
   END

  /* PREENCHO AS POSICOES ESQUERDAS COM ZEROS ATE 14 */
  XCNPJ = UDF_PADL(XCNPJ, '0', 14);

  /* PRIMEIRO DIGITO */

  /* CALCULO A SOMA */
  SOMA = 0;
  N = 12;
  WHILE (N >= 1) DO
   BEGIN
     SOMA = SOMA + CAST(UDF_COPY(XCNPJ, N, 1) AS INTEGER) *
       CAST(UDF_COPY(MULTS, (N * 3) + 1, 2) AS INTEGER);
     N = N - 1;
   END

  /* MODULO */
  IF ((11 - UDF_MOD(SOMA, 11)) IN (10, 11)) THEN
    DIGITO = 0;
  ELSE
    DIGITO = 11 - UDF_MOD(SOMA, 11);

  /* VERIFICA SE BATE COM O DIGITO 13 */
  IF (DIGITO <> CAST(UDF_COPY(XCNPJ, 13, 1) AS INTEGER)) THEN
   BEGIN
     RESULTADO = 0;
     SUSPEND;
     EXIT;
   END

  /* SEGUNDO DIGITO */

  /* CALCULO A SOMA */
  SOMA = 0;
  N = 13;
  WHILE (N >= 1) DO
   BEGIN
     SOMA = SOMA + CAST(UDF_COPY(XCNPJ, N, 1) AS INTEGER) *
       CAST(UDF_COPY(MULTS, ((N - 1) * 3) + 1, 2) AS INTEGER);
     N = N - 1;
   END

  /* MODULO */
  IF ((11 - UDF_MOD(SOMA, 11)) IN (10, 11)) THEN
    DIGITO = 0;
  ELSE
    DIGITO = 11 - UDF_MOD(SOMA, 11);

  /* VERIFICA SE BATE COM O DIGITO 14 */
  IF (DIGITO <> CAST(UDF_COPY(XCNPJ, 14, 1) AS INTEGER)) THEN
     RESULTADO = 0;

  SUSPEND;
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER CLIENTES_DOC
AS
DECLARE VARIABLE RETORNO INTEGER;
begin

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

end
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER CLIENTES_DOCUPD
AS
DECLARE VARIABLE RETORNO INTEGER;
begin

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

end
^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE VALIDA_CPF (
    CPF VARCHAR(20))
RETURNS (
    RESULTADO INTEGER)
AS
DECLARE VARIABLE XCPF VARCHAR(20);
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE SOMA INTEGER;
DECLARE VARIABLE DIGITO INTEGER;
DECLARE VARIABLE MULTS VARCHAR(30);
BEGIN

  /* MULTIPLICADORES */
  MULTS = '11,10,09,08,07,06,05,04,03,02';

  /* RETORNA VERDADEIRO PADRAO */
  RESULTADO = 1;

  /* RETIRO OS PONTOS, TRAÇOS, ETC */
  CPF = UDF_TRIM(CPF);
  XCPF = '';
  N = 0;
  WHILE (N < UDF_LEN(CPF)) DO
   BEGIN
     IF (UDF_COPY(CPF, N + 1, 1) BETWEEN '0' AND '9') THEN
       XCPF = XCPF || UDF_COPY(CPF, N + 1, 1);
     N = N + 1;
   END

  /* SE FOR EM BRANCO TERMINO */
  IF (XCPF = '') THEN
   BEGIN
     SUSPEND;
     EXIT;
   END

  /* PREENCHO AS POSICOES ESQUERDAS COM ZEROS ATE 11 */
  XCPF = UDF_PADL(XCPF, '0', 11);

  /* PRIMEIRO DIGITO */

  /* CALCULO A SOMA */
  SOMA = 0;
  N = 9;
  WHILE (N >= 1) DO
   BEGIN
     SOMA = SOMA + CAST(UDF_COPY(XCPF, N, 1) AS INTEGER) *
       CAST(UDF_COPY(MULTS, (N * 3) + 1, 2) AS INTEGER);
     N = N - 1;
   END

  /* MODULO */
  IF ((11 - UDF_MOD(SOMA, 11)) IN (10, 11)) THEN
    DIGITO = 0;
  ELSE
    DIGITO = 11 - UDF_MOD(SOMA, 11);

  /* VERIFICA SE BATE COM O DIGITO 10 */
  IF (DIGITO <> CAST(UDF_COPY(XCPF, 10, 1) AS INTEGER)) THEN
   BEGIN
     RESULTADO = 0;
     EXIT;
   END

  /* SEGUNDO DIGITO */

  /* CALCULO A SOMA */
  SOMA = 0;
  N = 10;
  WHILE (N >= 1) DO
   BEGIN
     SOMA = SOMA + CAST(UDF_COPY(XCPF, N, 1) AS INTEGER) *
       CAST(UDF_COPY(MULTS, ((N - 1) * 3) + 1, 2) AS INTEGER);
     N = N - 1;
   END

  /* MODULO */
  IF ((11 - UDF_MOD(SOMA, 11)) IN (10, 11)) THEN
    DIGITO = 0;
  ELSE
    DIGITO = 11 - UDF_MOD(SOMA, 11);

  /* VERIFICA SE BATE COM O DIGITO 11 */
  IF (DIGITO <> CAST(UDF_COPY(XCPF, 11, 1) AS INTEGER)) THEN
     RESULTADO = 0;

  SUSPEND;
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER CLIENTES_DOC
AS
DECLARE VARIABLE RETORNO INTEGER;
begin

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

end
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER CLIENTES_DOCUPD
AS
DECLARE VARIABLE RETORNO INTEGER;
begin

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

end
^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (163, CURRENT_TIMESTAMP);
COMMIT;
