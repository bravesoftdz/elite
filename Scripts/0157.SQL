/*
** ANALISE DE DATAS NOS MOVIMENTOS (FECHAMENTO)
*/

ALTER TABLE MOVIMENTOS ADD FECHA_DATA_FLUXO             DATA;
ALTER TABLE MOVIMENTOS ADD FECHA_SEMANA_FLUXO           INTEIRO;
ALTER TABLE MOVIMENTOS ADD FECHA_MES_FLUXO              INTEIRO;
ALTER TABLE MOVIMENTOS ADD FECHA_BIMESTRE_FLUXO         INTEIRO;
ALTER TABLE MOVIMENTOS ADD FECHA_TRIMESTRE_FLUXO        INTEIRO;
ALTER TABLE MOVIMENTOS ADD FECHA_QUADRIMESTRE_FLUXO     INTEIRO;
ALTER TABLE MOVIMENTOS ADD FECHA_SEMESTRE_FLUXO         INTEIRO;
ALTER TABLE MOVIMENTOS ADD FECHA_ANO_FLUXO              INTEIRO;
ALTER TABLE MOVIMENTOS ADD FECHA_STR_SEMANA_FLUXO       STR30;
ALTER TABLE MOVIMENTOS ADD FECHA_STR_MES_FLUXO          STR20;
ALTER TABLE MOVIMENTOS ADD FECHA_STR_BIMESTRE_FLUXO     STR30;
ALTER TABLE MOVIMENTOS ADD FECHA_STR_TRIMESTRE_FLUXO    STR30;
ALTER TABLE MOVIMENTOS ADD FECHA_STR_QUADRIMESTRE_FLUXO STR30;
ALTER TABLE MOVIMENTOS ADD FECHA_STR_SEMESTRE_FLUXO     STR30;

SET TERM ^ ;

CREATE TRIGGER MOVIMENTOS_BU4 FOR MOVIMENTOS
ACTIVE BEFORE UPDATE POSITION 400
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
begin

  IF (NEW.DATAFECHAMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAFECHAMENTO)
      RETURNING_VALUES
        NEW.FECHA_DATA_FLUXO,
        DIA_FLUXO,
        NEW.FECHA_SEMANA_FLUXO,
        NEW.FECHA_MES_FLUXO,
        NEW.FECHA_BIMESTRE_FLUXO,
        NEW.FECHA_TRIMESTRE_FLUXO,
        NEW.FECHA_QUADRIMESTRE_FLUXO,
        NEW.FECHA_SEMESTRE_FLUXO,
        NEW.FECHA_ANO_FLUXO,
        NEW.FECHA_STR_SEMANA_FLUXO,
        NEW.FECHA_STR_MES_FLUXO,
        NEW.FECHA_STR_BIMESTRE_FLUXO,
        NEW.FECHA_STR_TRIMESTRE_FLUXO,
        NEW.FECHA_STR_QUADRIMESTRE_FLUXO,
        NEW.FECHA_STR_SEMESTRE_FLUXO;

end

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_VENDEDOR_UPD
INACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DO VENDEDOR */
  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = NEW.CODVENDEDOR
  INTO
    NEW.NOME_VENDEDOR;
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER STATUS_UPDATE
INACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
BEGIN
   IF (NEW.TIPO = 0) THEN NEW.STATUS = 'ORÇAMENTO';
   IF (NEW.TIPO = 1) THEN NEW.STATUS = 'COMPRA';
   IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA';
   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRE ASSITENCIA';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';
      NEW.USUARIOFECHAMENTO = USER;

      /* TOTAL DA COMISSAO */
      SELECT
        SUM(VALOR_COMISSAO)
      FROM
        INDIVIDUAIS
      WHERE
        CODMOVSAIDA = OLD.CODIGO AND
        VENDIDO = 'S'
      INTO
        NEW.VALOR_COMISSAO;

      IF (NEW.VALOR_COMISSAO IS NULL) THEN
        NEW.VALOR_COMISSAO = 0.0;

      /* calcular impostos */
      IF (NEW.NOTA_NUMERO IS NOT NULL) THEN
       BEGIN

         /* TOTAL ICMS */
         SELECT
           SUM(TOTAL_ICMS)
         FROM
           INDIVIDUAIS
         WHERE
           CODMOVSAIDA = NEW.CODIGO
         INTO
           NEW.VALOR_ICMS;

       END

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

         NEW.TEMPO_CHEGADA    = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_CONCLUSAO  = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_TECNICOS = TOTAL;

         NEW.DATAINICIO  = PRIMEIRO;

         NEW.DATATERMINO = ULTIMO;

         IF (PRIMEIRO > NEW.DATAPREVISAO) THEN
           NEW.TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(NEW.DATAPREVISAO, PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
         ELSE
           NEW.TEMPO_FORADOPRAZO = 0;

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
INACTIVE AFTER UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ES IN (1, 2)) THEN
   BEGIN
     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO)) AND
        (NEW.TIPO IN (1, 2, 5))) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
           EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);
   END
  IF ((NEW.TIPO = 9) OR (NEW.VALOR_TOTAL = 0)) THEN
     DELETE FROM PAGAMENTOS WHERE CODMOVIMENTO = NEW.CODIGO AND
       PAGO = 0;
END

^

SET TERM ; ^

UPDATE
  MOVIMENTOS
SET
  FECHA_ANO_FLUXO = 2003
WHERE
  ES = 2 AND
  TIPO IN (3, 6);

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_VENDEDOR_UPD
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DO VENDEDOR */
  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = NEW.CODVENDEDOR
  INTO
    NEW.NOME_VENDEDOR;
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER STATUS_UPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
BEGIN
   IF (NEW.TIPO = 0) THEN NEW.STATUS = 'ORÇAMENTO';
   IF (NEW.TIPO = 1) THEN NEW.STATUS = 'COMPRA';
   IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA';
   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRE ASSITENCIA';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';
      NEW.USUARIOFECHAMENTO = USER;

      /* TOTAL DA COMISSAO */
      SELECT
        SUM(VALOR_COMISSAO)
      FROM
        INDIVIDUAIS
      WHERE
        CODMOVSAIDA = OLD.CODIGO AND
        VENDIDO = 'S'
      INTO
        NEW.VALOR_COMISSAO;

      IF (NEW.VALOR_COMISSAO IS NULL) THEN
        NEW.VALOR_COMISSAO = 0.0;

      /* calcular impostos */
      IF (NEW.NOTA_NUMERO IS NOT NULL) THEN
       BEGIN

         /* TOTAL ICMS */
         SELECT
           SUM(TOTAL_ICMS)
         FROM
           INDIVIDUAIS
         WHERE
           CODMOVSAIDA = NEW.CODIGO
         INTO
           NEW.VALOR_ICMS;

       END

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

         NEW.TEMPO_CHEGADA    = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_CONCLUSAO  = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_TECNICOS = TOTAL;

         NEW.DATAINICIO  = PRIMEIRO;

         NEW.DATATERMINO = ULTIMO;

         IF (PRIMEIRO > NEW.DATAPREVISAO) THEN
           NEW.TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(NEW.DATAPREVISAO, PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
         ELSE
           NEW.TEMPO_FORADOPRAZO = 0;

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
ACTIVE AFTER UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ES IN (1, 2)) THEN
   BEGIN
     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO)) AND
        (NEW.TIPO IN (1, 2, 5))) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
           EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);
   END
  IF ((NEW.TIPO = 9) OR (NEW.VALOR_TOTAL = 0)) THEN
     DELETE FROM PAGAMENTOS WHERE CODMOVIMENTO = NEW.CODIGO AND
       PAGO = 0;
END

^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (157, CURRENT_TIMESTAMP);
COMMIT;
