/*
** RATEIO CORRETO DOS CUSTOS DE N/F DE ENTRADA
*/

ALTER TABLE TEMPITENS ALTER VALOR_ICMSCOMPRA TO VALOR_ICMSCOMPRA2!

ALTER TABLE TEMPITENS
ADD VALOR_ICMSCOMPRA COMPUTED BY ((VALOR_TOTAL * (ICMSCOMPRA / 100)))!

ALTER TABLE "TEMPITENS" DROP "VALOR_ICMSCOMPRA2"!

ALTER TABLE TEMPITENS
ADD IPI PORCENTO
NOT NULL!

ALTER TRIGGER TEMPITENS_BEFUPD01
INACTIVE BEFORE UPDATE POSITION 0
AS
    DECLARE VARIABLE BARRA CHAR(14);
    DECLARE VARIABLE TIPO  INTEGER;
BEGIN
    /* VERIFICO SE EXISTE CÓDIGO DE BARRAS VÁLIDO */
    SELECT BARRA FROM PRODUTOS WHERE CODIGO = NEW.CODPRODUTO INTO :BARRA;
    IF (BARRA = '0000000000000') THEN
        EXCEPTION BARRA_NECESSARIA;
    SELECT
      ES
    FROM
      MOVIMENTOS
    WHERE
      CODIGO = OLD.CODMOVIMENTO
    INTO
      :TIPO;
    IF (TIPO > 0) THEN
      EXCEPTION COMPRA_ALTER;
END!

UPDATE TEMPITENS SET IPI = 0!

ALTER TRIGGER TEMPITENS_BEFUPD01
ACTIVE BEFORE UPDATE POSITION 0
AS
    DECLARE VARIABLE BARRA CHAR(14);
    DECLARE VARIABLE TIPO  INTEGER;
BEGIN
    /* VERIFICO SE EXISTE CÓDIGO DE BARRAS VÁLIDO */
    SELECT BARRA FROM PRODUTOS WHERE CODIGO = NEW.CODPRODUTO INTO :BARRA;
    IF (BARRA = '0000000000000') THEN
        EXCEPTION BARRA_NECESSARIA;
    SELECT
      ES
    FROM
      MOVIMENTOS
    WHERE
      CODIGO = OLD.CODMOVIMENTO
    INTO
      :TIPO;
    IF (TIPO > 0) THEN
      EXCEPTION COMPRA_ALTER;
END!

ALTER TABLE TEMPITENS
ADD VALOR_IPI COMPUTED BY ((VALOR_TOTAL * (IPI / 100)))!

ALTER TABLE MOVIMENTOS
ADD VALOR_IPI_PRODUTOS DINHEIRO
NOT NULL!

UPDATE MOVIMENTOS SET VALOR_IPI_PRODUTOS = '0'!

ALTER TABLE MOVIMENTOS
ADD TOTAL_IPI COMPUTED BY ((VALOR_IPI + VALOR_IPI_PRODUTOS))!

DROP PROCEDURE REL_NOTACORPO!

ALTER TABLE "MOVIMENTOS" DROP "NOTA_BASEICMS"!

ALTER TABLE MOVIMENTOS
ADD NOTA_BASEICMS COMPUTED BY ((NOTA_VALOR_OUTROS + VALOR_PRODUTOS))!

DROP PROCEDURE ULTIMAOS!

DROP TRIGGER MOVIMENTOS_AFTINS!

DROP TRIGGER MOVIMENTOS_AFTUPD!

DROP PROCEDURE GERAPARCELAS!

DROP PROCEDURE AUTOBAIXA!

ALTER TABLE "MOVIMENTOS" DROP "NOTA_VALOR_TOTAL"!

ALTER TABLE MOVIMENTOS
ADD NOTA_VALOR_TOTAL COMPUTED BY (VALOR_TOTAL + NOTA_VALOR_FRETE + NOTA_VALOR_SEGURO + NOTA_VALOR_OUTROS + TOTAL_IPI)!

CREATE PROCEDURE ULTIMAOS (
    CODCLIENTE INTEGER)
RETURNS (
    NUMERO_OS INTEGER,
    DATA TIMESTAMP,
    SOLICITANTE VARCHAR(40) CHARACTER SET NONE,
    RESPONSAVEL VARCHAR(40) CHARACTER SET NONE,
    OUTRAS_ABERTAS INTEGER,
    TODAS_FECHADAS INTEGER,
    TOTAL_FECHADAS NUMERIC(9,2),
    NUMERO_ULTIMA INTEGER,
    DATA_ULTIMA TIMESTAMP,
    VALOR_ULTIMA NUMERIC(9,2),
    SOLICITANTE_ULTIMA VARCHAR(40) CHARACTER SET NONE)
AS
BEGIN
  /* PROCURO A ULTIMA OS EM ABERTO */
  SELECT
    MAX(CODIGO)
  FROM
    MOVIMENTOS
  WHERE
    ES = 2 AND
    TIPO = 2 AND
    CODCLIENTE = :CODCLIENTE
  INTO
    :NUMERO_OS;
  /* SE EXISTIR, FAÇO OUTRAS PESQUISAS */
  IF (NUMERO_OS IS NOT NULL) THEN
   BEGIN
     /* DADOS DA ULTIMA OS ABERTA */
     SELECT
       MO.DATA,
       MO.SOLICITANTE,
       VE.NOME
     FROM
       MOVIMENTOS MO
       LEFT JOIN CLIENTES VE ON
         (MO.CODVENDEDOR_ABRE = VE.CODIGO)
     WHERE
       MO.CODIGO = :NUMERO_OS
     INTO
       :DATA,
       :SOLICITANTE,
       :RESPONSAVEL;
     /* EXISTEM OUTRAS OS ABERTAS? */
     SELECT
       COUNT(CODIGO)
     FROM
       MOVIMENTOS
     WHERE
       ES = 2 AND
       TIPO = 2 AND
       CODCLIENTE = :CODCLIENTE
     INTO
       :OUTRAS_ABERTAS;
     OUTRAS_ABERTAS = OUTRAS_ABERTAS - 1;
     /* QUANTAS OS FECHADAS */
     SELECT
       COUNT(CODIGO),
       SUM(NOTA_VALOR_TOTAL)
     FROM
       MOVIMENTOS
     WHERE
       ES = 2 AND
       TIPO IN (3, 6) AND
       CODCLIENTE = :CODCLIENTE
     INTO
       :TODAS_FECHADAS,
       :TOTAL_FECHADAS;
     /* PROCURO A ÚLTIMA FECHADA */
     SELECT
       MAX(CODIGO)
     FROM
       MOVIMENTOS
     WHERE
       ES = 2 AND
       TIPO IN (3, 6) AND
       CODCLIENTE = :CODCLIENTE
     INTO
       :NUMERO_ULTIMA;
     /* INFORMAÇÕES DA ÚLTIMA FECHADA */
     SELECT
       DATA,
       NOTA_VALOR_TOTAL,
       SOLICITANTE
     FROM
       MOVIMENTOS
     WHERE
       CODIGO = :NUMERO_ULTIMA
     INTO
       :DATA_ULTIMA,
       :VALOR_ULTIMA,
       :SOLICITANTE_ULTIMA;
   END
  /* RETORNO OS VALORES */
  SUSPEND;
END!

GRANT EXECUTE ON PROCEDURE ULTIMAOS TO PUBLIC!

CREATE PROCEDURE GERAPARCELAS (
    CODIGO INTEGER)
AS
DECLARE VARIABLE TOTAL NUMERIC(9,2);
DECLARE VARIABLE PARCELA NUMERIC(9,2);
DECLARE VARIABLE CONDICAO VARCHAR(40);
DECLARE VARIABLE QUANTIDADE INTEGER;
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE CODPAG INTEGER;
DECLARE VARIABLE DATAMOV DATE;
DECLARE VARIABLE DIAS INTEGER;
DECLARE VARIABLE CODDOC INTEGER;
DECLARE VARIABLE CODPAGO INTEGER;
DECLARE VARIABLE DOCVISTA INTEGER;
DECLARE VARIABLE DOCPRAZO INTEGER;
DECLARE VARIABLE DESCRICAO CHAR(40);
DECLARE VARIABLE TIPO INTEGER;
DECLARE VARIABLE CODCONTA_COMPRADEB INTEGER;
DECLARE VARIABLE CODCONTA_VENDACRE INTEGER;
DECLARE VARIABLE CODCONTA INTEGER;
DECLARE VARIABLE NOME VARCHAR(16);
DECLARE VARIABLE CODCLIENTE INTEGER;
DECLARE VARIABLE CODEMPRESA INTEGER;
BEGIN
   SELECT
      NOTA_VALOR_TOTAL,
      CONDICAO,
      ES,
      DATA,
      TIPO,
      CODCLIENTE,
      CODEMPRESA
   FROM
      MOVIMENTOS
   WHERE
      CODIGO = :CODIGO
   INTO
      :TOTAL,
      :CONDICAO,
      :ES,
      :DATAMOV,
      :TIPO,
      :CODCLIENTE,
      :CODEMPRESA;
   SELECT
      CODDOC_AVISTA,
      CODDOC_PRAZO,
      CODCONTA_COMPRADEB,
      CODCONTA_VENDACRE
   FROM
      SISCONFIG
   WHERE
      CODIGO = :CODEMPRESA
   INTO
      :DOCVISTA,
      :DOCPRAZO,
      :CODCONTA_COMPRADEB,
      :CODCONTA_VENDACRE;
   if (ES = 1) then
    BEGIN
     CODCONTA = CODCONTA_COMPRADEB;
     SELECT
       F_LEFT(NOME, 16)
     FROM
       CLIENTES
     WHERE
       CODIGO = :CODCLIENTE
     INTO
       :NOME;
    END
   else
    BEGIN
     CODCONTA = CODCONTA_VENDACRE;
     SELECT
       F_LEFT(NOME, 16)
     FROM
       CLIENTES
     WHERE
       CODIGO = :CODCLIENTE
     INTO
       :NOME;
   END
   IF (TOTAL <= 0) THEN EXIT;
   SELECT
      COUNT(*)
   FROM
      PARCELAS(
        :CONDICAO
      )
   INTO
      :QUANTIDADE;
   IF (QUANTIDADE > 0) THEN
    BEGIN
     DELETE FROM
      PAGAMENTOS
     WHERE
      CODMOVIMENTO = :CODIGO;
     PARCELA = CAST((TOTAL / QUANTIDADE) AS INTEGER);
     N = 0;
     FOR
     SELECT DIAS FROM PARCELAS(:CONDICAO) INTO :DIAS DO
      BEGIN
       N = N + 1;
       IF (ES = 1) THEN
          DESCRICAO = 'PARC ' || N || '/' || QUANTIDADE || ' COMPRA ' || CODIGO || ' ' || NOME;
       ELSE
          DESCRICAO = 'PARC ' || N || '/' || QUANTIDADE || ' VENDA ' || CODIGO || ' ' || NOME;
       SELECT SEQUENCIA FROM SEQ_OBTER('PAGAMENTOS') INTO :CODPAG;
       if (DIAS = 0) then
        begin
          CODDOC = DOCVISTA;
          CODPAGO = 0;
        end else
        begin
          CODDOC = DOCPRAZO;
          CODPAGO = 0;
        end
       INSERT INTO PAGAMENTOS (CODIGO, CODMOVIMENTO, NUMERO, DESCRICAO, ES,
         VALOR, DATAVENCIMENTO, CODDOCUMENTO, PAGO, CODCONTA, CODEMPRESA) VALUES (:CODPAG, :CODIGO, :N,
         :DESCRICAO, :ES, :PARCELA, :DATAMOV + :DIAS, :CODDOC, :CODPAGO, :CODCONTA, :CODEMPRESA);
      END
     UPDATE PAGAMENTOS SET VALOR = VALOR + (:TOTAL - (:PARCELA * :QUANTIDADE))
       WHERE CODMOVIMENTO = :CODIGO AND NUMERO = 1;
    END ELSE EXCEPTION CONDICAO_ERRADA;
END!

GRANT EXECUTE ON PROCEDURE GERAPARCELAS TO PUBLIC!

CREATE PROCEDURE AUTOBAIXA (
    CODMOVIMENTO INTEGER)
AS
DECLARE VARIABLE CODDOC_AVISTA INTEGER;
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE CODDOCUMENTO INTEGER;
DECLARE VARIABLE DATAVENCIMENTO TIMESTAMP;
DECLARE VARIABLE PAGO INTEGER;
DECLARE VARIABLE PARCELA_TOTAL NUMERIC(9,2);
DECLARE VARIABLE MOVIMENTO_TOTAL NUMERIC(9,2);
DECLARE VARIABLE VALOR_COMISSAO NUMERIC(9,2);
DECLARE VARIABLE XPARC INTEGER;
DECLARE VARIABLE CODEMPRESA INTEGER;
DECLARE VARIABLE CLIENTE_COMISSIONADO CHAR(1);
DECLARE VARIABLE VALOR_SERVICO NUMERIC(9,2);
DECLARE VARIABLE PRODUTO_COMISSIONADO CHAR(1);
DECLARE VARIABLE TOTAL_SERVICOS_COMIS NUMERIC(9,2);
BEGIN
  /* VERIFICO SE OS VALORES SAO CORRESPONDENTES */
  SELECT
    COUNT(CODIGO),
    SUM(VALOR)
  FROM
    PAGAMENTOS
  WHERE
    CODMOVIMENTO = :CODMOVIMENTO
  INTO
    :XPARC,
    :PARCELA_TOTAL;

  /* COMISSIONAMENTO DE VENDEDORES */
  SELECT
    NOTA_VALOR_TOTAL,
    VALOR_COMISSAO,
    CODEMPRESA
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :MOVIMENTO_TOTAL,
    :VALOR_COMISSAO,
    :CODEMPRESA;

  /* CALCULO A COMISSAO DE CADA PARCELA, COM SEGURANCA */
  IF (VALOR_COMISSAO IS NULL) THEN
    VALOR_COMISSAO = 0;
  IF (XPARC IS NULL) THEN
    XPARC = 0;

  IF ((VALOR_COMISSAO > 0) AND (XPARC > 0)) THEN
    VALOR_COMISSAO = (VALOR_COMISSAO / CAST(XPARC AS NUMERIC(9,2)));

  IF (MOVIMENTO_TOTAL > PARCELA_TOTAL) THEN
    EXCEPTION VALOR_PARCELA;

  /**/
  /**  COMISSIONAMENTO DE SERVIÇOS */
  /**/
  TOTAL_SERVICOS_COMIS = 0;

  SELECT
    CL.COMISSIONADO
  FROM
    CLIENTES CL
    JOIN MOVIMENTOS MO ON
      (CL.CODIGO = MO.CODCLIENTE)
  WHERE
    MO.CODIGO = :CODMOVIMENTO
  INTO
    :CLIENTE_COMISSIONADO;

  IF (CLIENTE_COMISSIONADO = 'S') THEN
   BEGIN

     FOR
     SELECT
       ID.VALOR_PAGO,
       PO.COMISSIONADO
     FROM
       INDIVIDUAIS ID
       JOIN PRODUTOS PO ON
         (ID.CODPRODUTO = PO.CODIGO)
     WHERE
       ID.CODMOVSAIDA = :CODMOVIMENTO AND
       ID.VENDIDO = 'S' AND
       PO.PS = 'S'
     INTO
       :VALOR_SERVICO,
       :PRODUTO_COMISSIONADO
     DO
     IF (PRODUTO_COMISSIONADO = 'S') THEN
       TOTAL_SERVICOS_COMIS = TOTAL_SERVICOS_COMIS + VALOR_SERVICO;

     UPDATE
       OS_VENDER
     SET
       TOTAL_SERVICOS = :TOTAL_SERVICOS_COMIS
     WHERE
       CODMOVIMENTO = :CODMOVIMENTO;

   END

  /* QUAL É O DOCUMENTO A VISTA? */
  SELECT
    CODDOC_AVISTA
  FROM
    SISCONFIG
  WHERE
    CODIGO = :CODEMPRESA
  INTO
    :CODDOC_AVISTA;

  /* PROCURO OS PAGAMENTOS, ALGUM É A VISTA? */
  FOR
  SELECT
    CODIGO,
    CODDOCUMENTO,
    DATAVENCIMENTO,
    PAGO
  FROM
    PAGAMENTOS
  WHERE
    CODMOVIMENTO = :CODMOVIMENTO
  INTO
    :CODIGO,
    :CODDOCUMENTO,
    :DATAVENCIMENTO,
    :PAGO
  DO
  BEGIN
    /* ATUALIZO A COMISSAO */
    UPDATE
      PAGAMENTOS
    SET
      VALOR_COMISSAO = :VALOR_COMISSAO
    WHERE
      CODIGO = :CODIGO;
    /* O DOCUMENTO É A VISTA? */
    IF ((CODDOCUMENTO = CODDOC_AVISTA) AND (PAGO = 0)) THEN
     BEGIN
      /* FAÇO O LANÇAMENTO */
      UPDATE
        PAGAMENTOS
      SET
        PAGO = 1
      WHERE
        CODIGO = :CODIGO;
     END
  END
END!

GRANT EXECUTE ON PROCEDURE AUTOBAIXA TO PUBLIC!

CREATE TRIGGER MOVIMENTOS_AFTINS FOR MOVIMENTOS
AFTER INSERT POSITION 0
AS
BEGIN
  IF (NEW.ES IN (1, 2)) THEN
    IF (NEW.VALOR_TOTAL > 0) THEN
      EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
END!

CREATE TRIGGER MOVIMENTOS_AFTUPD FOR MOVIMENTOS
AFTER UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ES IN (1, 2)) THEN
   BEGIN
     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO)) AND
        (NEW.TIPO IN (1, 2, 5))) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
     if ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) then
           EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);
   END
  IF ((NEW.TIPO = 9) or (NEW.VALOR_TOTAL = 0)) THEN
     DELETE FROM PAGAMENTOS WHERE CODMOVIMENTO = NEW.CODIGO AND
       PAGO = 0;
END!

CREATE PROCEDURE REL_NOTACORPO (
    CODMOVIMENTO INTEGER)
RETURNS (
    ES SMALLINT,
    CODCLIENTE INTEGER,
    DATA TIMESTAMP,
    SERVICOS VARCHAR (254),
    VALOR_SERVICOS NUMERIC (9, 2),
    VALOR_ITENS NUMERIC (9, 2),
    DESCONTO NUMERIC (9, 2),
    VALOR_PRODUTOS NUMERIC (9, 2),
    VALOR_ICMS NUMERIC (9, 2),
    VALOR_TOTAL NUMERIC (9, 2),
    OBSERVACOES VARCHAR (254),
    NOTA_NUMERO INTEGER,
    NOTA_DATAEMISSAO TIMESTAMP,
    NOTA_CODNATUOPER VARCHAR (10),
    NOTA_CODTRANSPORTADOR INTEGER,
    NOTA_PLACAVEICULO VARCHAR (10),
    NOTA_UFVEICULO VARCHAR (2),
    NOTA_FRETE SMALLINT,
    NOTA_VALOR_FRETE NUMERIC (9, 2),
    NOTA_VALOR_SEGURO NUMERIC (9, 2),
    NOTA_VALOR_OUTROS NUMERIC (9, 2),
    NOTA_VALOR_TOTAL NUMERIC (9, 2),
    NOTA_QUANTIDADE NUMERIC (9, 2),
    NOTA_ESPECIE VARCHAR (30),
    NOTA_MARCA VARCHAR (20),
    NOTA_VOLNUM INTEGER,
    NOTA_PESOBRUTO NUMERIC (9, 2),
    NOTA_PESOLIQUIDO NUMERIC (9, 2),
    NOTA_DADOSADICIONAIS VARCHAR (254),
    CODVENDEDOR INTEGER,
    STATUS VARCHAR (20),
    CONDICAO VARCHAR (40),
    DATAINICIO TIMESTAMP,
    DATATERMINO TIMESTAMP,
    ICMSSIMPLES CHAR (1),
    ICMSSIMPALIQ NUMERIC (9, 4),
    ISSALIQ NUMERIC (9, 4),
    VALOR_ISS NUMERIC (9, 2),
    NOTA_IESUBST VARCHAR (20),
    NOTA_DATASAIDA TIMESTAMP,
    NOTA_BASEICMS NUMERIC (9, 4),
    NOTA_BASEICMSSUBST NUMERIC (9, 4),
    NOTA_VALORICMSSUBST NUMERIC (9, 2),
    VALOR_IPI NUMERIC (9, 2),
    CODVENDEDOR_ABRE INTEGER,
    DESCONTOTXT VARCHAR (40),
    CLI_NOME VARCHAR (40),
    CLI_LOGRADOURO VARCHAR (40),
    CLI_NUMERO INTEGER,
    CLI_COMPLEMENTO VARCHAR (40),
    CLI_BAIRRO VARCHAR (60),
    CLI_CEP VARCHAR (10),
    CLI_CIDADE VARCHAR (60),
    CLI_ESTADO VARCHAR (2),
    CLI_FONE VARCHAR (20),
    CLI_FAX VARCHAR (20),
    CLI_EMAIL VARCHAR (50),
    CLI_RGIE VARCHAR (20),
    CLI_CPFCGC VARCHAR (20),
    TRA_NOME VARCHAR (40),
    TRA_LOGRADOURO VARCHAR (40),
    TRA_NUMERO INTEGER,
    TRA_COMPLEMENTO VARCHAR (40),
    TRA_BAIRRO VARCHAR (60),
    TRA_CEP VARCHAR (10),
    TRA_CIDADE VARCHAR (60),
    TRA_ESTADO VARCHAR (2),
    TRA_FONE VARCHAR (20),
    TRA_FAX VARCHAR (20),
    TRA_EMAIL VARCHAR (50),
    TRA_RGIE VARCHAR (20),
    TRA_CPFCGC VARCHAR (20),
    CODIGO INTEGER,
    MARCA VARCHAR (40),
    MODELO VARCHAR (40),
    DEFEITO VARCHAR (40),
    GARANTIA CHAR (1),
    SERIE VARCHAR (40),
    ACESSORIOS VARCHAR (50),
    CONDICAOEXTERNA VARCHAR (40),
    SOLICITANTE VARCHAR (40),
    VENDEDORABRE VARCHAR (40),
    VENDEDOR VARCHAR (40),
    USUARIO VARCHAR (40),
    CLI_CONTRATO CHAR (1),
    CLI_KM INTEGER,
    NATUREZAOPERACAO VARCHAR (30),
    CODEMPRESA INTEGER,
    EMPRESA_NOME VARCHAR (40),
    EMPRESA_RAZAOSOCIAL VARCHAR (40),
    EMPRESA_CNPJ VARCHAR (20),
    EMPRESA_IE VARCHAR (20),
    EMPRESA_LOGRADOURO VARCHAR (60),
    EMPRESA_NUMERO INTEGER,
    EMPRESA_COMPLEMENTO VARCHAR (40),
    EMPRESA_BAIRRO VARCHAR (60),
    EMPRESA_CIDADE VARCHAR (60),
    EMPRESA_ESTADO CHAR (2),
    EMPRESA_CEP VARCHAR (9),
    EMPRESA_FONE VARCHAR (20),
    TIPOOS VARCHAR (40))
AS
DECLARE VARIABLE TEMP_PESSOAFISICA CHAR(1);
DECLARE VARIABLE TEMP_RAZAOSOCIAL VARCHAR(40);
DECLARE VARIABLE TEMP_IE VARCHAR(20);
DECLARE VARIABLE TEMP_CGC VARCHAR(20);
DECLARE VARIABLE CODMARCA INTEGER;
DECLARE VARIABLE CODMODELO INTEGER;
DECLARE VARIABLE CODDEFEITO INTEGER;
declare variable OSTIPO INTEGER;
BEGIN
  SELECT
    CODIGO,
    ES,
    CODCLIENTE,
    DATA,
    F_LEFT(SERVICOS, 254),
    VALOR_SERVICOS,
    VALOR_ITENS,
    DESCONTO,
    VALOR_PRODUTOS,
    VALOR_ICMS,
    VALOR_TOTAL,
    F_LEFT(OBSERVACOES, 254),
    NOTA_NUMERO,
    NOTA_DATAEMISSAO,
    NOTA_CODNATUOPER,
    NOTA_CODTRANSPORTADOR,
    NOTA_PLACAVEICULO,
    NOTA_UFVEICULO,
    NOTA_FRETE,
    NOTA_VALOR_FRETE,
    NOTA_VALOR_SEGURO,
    NOTA_VALOR_OUTROS,
    NOTA_VALOR_TOTAL,
    NOTA_QUANTIDADE,
    NOTA_ESPECIE,
    NOTA_MARCA,
    NOTA_VOLNUM,
    NOTA_PESOBRUTO,
    NOTA_PESOLIQUIDO,
    F_LEFT(NOTA_DADOSADICIONAIS, 254),
    CODVENDEDOR,
    STATUS,
    CONDICAO,
    DATAINICIO,
    DATATERMINO,
    ICMSSIMPLES,
    ICMSSIMPALIQ,
    ISSALIQ,
    VALOR_ISS,
    NOTA_IESUBST,
    NOTA_DATASAIDA,
    NOTA_BASEICMS,
    NOTA_BASEICMSSUBST,
    NOTA_VALORICMSSUBST,
    VALOR_IPI,
    CODVENDEDOR_ABRE,
    DESCONTOTXT,
    CODMARCA,
    CODMODELO,
    CODDEFEITO,
    GARANTIA,
    SERIE,
    ACESSORIOS,
    CONDICAOEXTERNA,
    SOLICITANTE,
    CODEMPRESA,
    OSTIPO
  FROM
    MOVIMENTOS MO
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :CODIGO,
    :ES,
    :CODCLIENTE,
    :DATA,
    :SERVICOS,
    :VALOR_SERVICOS,
    :VALOR_ITENS,
    :DESCONTO,
    :VALOR_PRODUTOS,
    :VALOR_ICMS,
    :VALOR_TOTAL,
    :OBSERVACOES,
    :NOTA_NUMERO,
    :NOTA_DATAEMISSAO,
    :NOTA_CODNATUOPER,
    :NOTA_CODTRANSPORTADOR,
    :NOTA_PLACAVEICULO,
    :NOTA_UFVEICULO,
    :NOTA_FRETE,
    :NOTA_VALOR_FRETE,
    :NOTA_VALOR_SEGURO,
    :NOTA_VALOR_OUTROS,
    :NOTA_VALOR_TOTAL,
    :NOTA_QUANTIDADE,
    :NOTA_ESPECIE,
    :NOTA_MARCA,
    :NOTA_VOLNUM,
    :NOTA_PESOBRUTO,
    :NOTA_PESOLIQUIDO,
    :NOTA_DADOSADICIONAIS,
    :CODVENDEDOR,
    :STATUS,
    :CONDICAO,
    :DATAINICIO,
    :DATATERMINO,
    :ICMSSIMPLES,
    :ICMSSIMPALIQ,
    :ISSALIQ,
    :VALOR_ISS,
    :NOTA_IESUBST,
    :NOTA_DATASAIDA,
    :NOTA_BASEICMS,
    :NOTA_BASEICMSSUBST,
    :NOTA_VALORICMSSUBST,
    :VALOR_IPI,
    :CODVENDEDOR_ABRE,
    :DESCONTOTXT,
    :CODMARCA,
    :CODMODELO,
    :CODDEFEITO,
    :GARANTIA,
    :SERIE,
    :ACESSORIOS,
    :CONDICAOEXTERNA,
    :SOLICITANTE,
    :CODEMPRESA,
    :OSTIPO;

  SELECT
    CL.NOME,
    F_LEFT(CL.RAZAOSOCIAL, 40),
    CL.PESSOAFISICA,
    CL.NUMERO,
    CL.COMPLEMENTO,
    CL.ESTADO,
    CL.FONE,
    CL.FAX,
    CL.EMAIL,
    CL.RG,
    CL.CPF,
    CL.IE,
    CL.CGC,
    CL.CONTRATO,
    CL.KMS,
    LO.LOGRADOURO,
    BA.BAIRRO,
    CI.CIDADE,
    LO.CEP
  FROM
    CLIENTES CL
    LEFT JOIN LOGRADOUROS LO ON
      ( LO.CODIGO = CL.LOCALIZACAO AND
        LO.BAIRRO = CL.BAIRRO AND
        LO.CIDADE = CL.CIDADE AND
        LO.ESTADO = CL.ESTADO )
    LEFT JOIN BAIRROS BA ON
      ( BA.CODIGO = CL.BAIRRO AND
        BA.CIDADE = CL.CIDADE AND
        BA.ESTADO = CL.ESTADO )
    LEFT JOIN CIDADES CI ON
      ( CI.CODIGO = CL.CIDADE AND
        CI.ESTADO = CL.ESTADO )
  WHERE
    CL.CODIGO = :CODCLIENTE
  INTO
    :CLI_NOME,
    :TEMP_RAZAOSOCIAL,
    :TEMP_PESSOAFISICA,
    :CLI_NUMERO,
    :CLI_COMPLEMENTO,
    :CLI_ESTADO,
    :CLI_FONE,
    :CLI_FAX,
    :CLI_EMAIL,
    :CLI_RGIE,
    :CLI_CPFCGC,
    :TEMP_IE,
    :TEMP_CGC,
    :CLI_CONTRATO,
    :CLI_KM,
    :CLI_LOGRADOURO,
    :CLI_BAIRRO,
    :CLI_CIDADE,
    :CLI_CEP;
  IF ( TEMP_PESSOAFISICA = 'J' ) THEN
   BEGIN
     CLI_RGIE   = TEMP_IE;
     CLI_CPFCGC = TEMP_CGC;
   END

  SELECT
    TR.NOME,
    F_LEFT(TR.RAZAOSOCIAL, 40),
    TR.PESSOAFISICA,
    TR.NUMERO,
    TR.COMPLEMENTO,
    TR.ESTADO,
    TR.FONE,
    TR.FAX,
    TR.EMAIL,
    TR.RG,
    TR.CPF,
    TR.IE,
    TR.CGC,
    LO.LOGRADOURO,
    BA.BAIRRO,
    CI.CIDADE,
    LO.CEP
  FROM
    CLIENTES TR
    LEFT JOIN LOGRADOUROS LO ON
      ( LO.CODIGO = TR.LOCALIZACAO AND
        LO.BAIRRO = TR.BAIRRO AND
        LO.CIDADE = TR.CIDADE AND
        LO.ESTADO = TR.ESTADO )
    LEFT JOIN BAIRROS BA ON
      ( BA.CODIGO = TR.BAIRRO AND
        BA.CIDADE = TR.CIDADE AND
        BA.ESTADO = TR.ESTADO )
    LEFT JOIN CIDADES CI ON
      ( CI.CODIGO = TR.CIDADE AND
        CI.ESTADO = TR.ESTADO )
  WHERE
    TR.CODIGO = :NOTA_CODTRANSPORTADOR
  INTO
    :TRA_NOME,
    :TEMP_RAZAOSOCIAL,
    :TEMP_PESSOAFISICA,
    :TRA_NUMERO,
    :TRA_COMPLEMENTO,
    :TRA_ESTADO,
    :TRA_FONE,
    :TRA_FAX,
    :TRA_EMAIL,
    :TRA_RGIE,
    :TRA_CPFCGC,
    :TEMP_IE,
    :TEMP_CGC,
    :TRA_LOGRADOURO,
    :TRA_BAIRRO,
    :TRA_CIDADE,
    :TRA_CEP;
  IF ( TEMP_PESSOAFISICA = 'J' ) THEN
   BEGIN
     TRA_RGIE   = TEMP_IE;
     TRA_CPFCGC = TEMP_CGC;
   END

  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODVENDEDOR_ABRE
  INTO
    :VENDEDORABRE;

  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODVENDEDOR
  INTO
    :VENDEDOR;

  SELECT
    DESCRICAO
  FROM
    MARCAS
  WHERE
    CODIGO = :CODMARCA
  INTO
    :MARCA;

  SELECT
    DESCRICAO
  FROM
    MODELOS
  WHERE
    CODIGO = :CODMODELO AND
    CODEQUIPAMENTO = :CODMARCA
  INTO
    :MODELO;

  SELECT
    DESCRICAO
  FROM
    DEFEITOS
  WHERE
    CODIGO = :CODDEFEITO
  INTO
    :DEFEITO;

  SELECT
    NATUREZA
  FROM
    NATUOPER
  WHERE
    CODIGO = :NOTA_CODNATUOPER
  INTO
    :NATUREZAOPERACAO;

  SELECT
    TIPO
  FROM
    OSTIPOS
  WHERE
    CODIGO = :OSTIPO
  INTO
    :TIPOOS;

  SELECT
    CL.NOME,
    CL.RAZAOSOCIAL,
    CL.CGC,
    CL.IE,
    CL.LOGRADOURO,
    CL.NUMERO,
    CL.COMPLEMENTO,
    CL.BAIRRO,
    CL.CIDADE,
    CL.ESTADO,
    CL.CEP,
    CL.FONE
  FROM
    SISCONFIG SI
    JOIN REL_CLIENTES CL ON
      (SI.CODCLIENTE = CL.CODIGO)
  WHERE
    SI.CODIGO = :CODEMPRESA
  INTO
    :EMPRESA_NOME,
    :EMPRESA_RAZAOSOCIAL,
    :EMPRESA_CNPJ,
    :EMPRESA_IE,
    :EMPRESA_LOGRADOURO,
    :EMPRESA_NUMERO,
    :EMPRESA_COMPLEMENTO,
    :EMPRESA_BAIRRO,
    :EMPRESA_CIDADE,
    :EMPRESA_ESTADO,
    :EMPRESA_CEP,
    :EMPRESA_FONE;

  USUARIO = USER;

 SUSPEND;
END!

GRANT EXECUTE ON PROCEDURE REL_NOTACORPO TO PUBLIC!

ALTER TABLE MOVIMENTOS
ADD VALOR_RATEIO_CUSTO COMPUTED BY (VALOR_SERVICOS + NOTA_VALOR_FRETE + NOTA_VALOR_SEGURO + NOTA_VALOR_OUTROS + VALOR_ISS + VALOR_IPI)!

ALTER TRIGGER ORSOMA_INS
ACTIVE AFTER INSERT POSITION 0
AS
   DECLARE VARIABLE SOMA       NUMERIC(9,2);
   DECLARE VARIABLE CODIGO     INTEGER;
   DECLARE VARIABLE ES         CHAR(1);
   DECLARE VARIABLE TIPO       CHAR(1);
   DECLARE VARIABLE ETIQUETA   CHAR(1);
   DECLARE VARIABLE NUMETIQ    INTEGER;
   DECLARE VARIABLE INDIVIDUAL CHAR(1);
   DECLARE VARIABLE SEQUENCIA  INTEGER;
   DECLARE VARIABLE SEQUENSTR  CHAR(4);
   DECLARE VARIABLE N          INTEGER;
   DECLARE VARIABLE C          INTEGER;
   DECLARE VARIABLE BARRA      CHAR(14);
   DECLARE VARIABLE PS         CHAR(1);
   declare variable EMPRESA    INTEGER;
BEGIN
 /* VERIFICO SE EXISTE CÓDIGO DE BARRAS VÁLIDO */
 SELECT BARRA, PS FROM PRODUTOS WHERE CODIGO = NEW.CODPRODUTO INTO :BARRA, :PS;
 IF (BARRA = '0000000000000') THEN
      EXCEPTION BARRA_NECESSARIA;
 IF (PS = 'P') THEN
  BEGIN
   CODIGO = NEW.CODMOVIMENTO;
   SELECT ES, TIPO, CODEMPRESA FROM MOVIMENTOS WHERE CODIGO = :CODIGO
     INTO :ES, :TIPO, :EMPRESA;
   IF ((ES = 1) AND (TIPO = 1)) THEN
    BEGIN
      UPDATE PRODUTOS SET PRECOCUSTO = NEW.VALOR_UNITARIO
        WHERE CODIGO = NEW.CODPRODUTO;
      IF (NEW.REAJUSTAR = 'S') THEN
        UPDATE PRODUTOS SET PRECOVENDA = NEW.VALOR_VENDA,
          ICMS = NEW.ICMSVENDA WHERE CODIGO = NEW.CODPRODUTO;
      SELECT ETIQUETA, INDIVIDUAL, SEQUENCIA, BARRA FROM PRODUTOS
        WHERE CODIGO = NEW.CODPRODUTO
        INTO :ETIQUETA, :INDIVIDUAL, :SEQUENCIA, :BARRA;
      N = 0;
      IF (INDIVIDUAL = 'S') THEN
       BEGIN
        WHILE (N < NEW.QUANTIDADE) DO
         BEGIN
           N = N + 1;
           SEQUENCIA = (SEQUENCIA + 1);
           IF (SEQUENCIA > 99) THEN SEQUENSTR = ('0' || SEQUENCIA);
            ELSE IF (SEQUENCIA > 9) THEN SEQUENSTR = ('00' || SEQUENCIA);
             ELSE IF (SEQUENCIA > 0) THEN SEQUENSTR = ('000' || SEQUENCIA);
              ELSE SEQUENSTR = '0000';
           BARRA = EAN('999' || NEW.CODPRODUTO || SEQUENSTR || '0');
           EXECUTE PROCEDURE SEQ_OBTER 'INDIVIDUAIS'
             RETURNING_VALUES C;
           INSERT INTO INDIVIDUAIS (CODIGO, CODITEM, CODPRODUTO, CODMOVENTRADA, SEQUENCIA,
             ICMSVENDA, VALOR_VENDA, IMPETIQ, QUANTIDADE, UNICO, BARRA, CODEMPRESA) VALUES (:C,
             NEW.CODIGO, NEW.CODPRODUTO, NEW.CODMOVIMENTO, :SEQUENSTR, NEW.ICMSVENDA,
             NEW.VALOR_VENDA, :ETIQUETA, 1, 1, :BARRA, :EMPRESA);
         END
        UPDATE PRODUTOS SET SEQUENCIA = (SEQUENCIA + NEW.QUANTIDADE)
          WHERE CODIGO = NEW.CODPRODUTO;
       END ELSE
       BEGIN
           EXECUTE PROCEDURE SEQ_OBTER 'INDIVIDUAIS'
             RETURNING_VALUES C;
           INSERT INTO INDIVIDUAIS (CODIGO, CODITEM, CODPRODUTO, CODMOVENTRADA, SEQUENCIA,
             ICMSVENDA, VALOR_VENDA, IMPETIQ, QUANTIDADE, UNICO, BARRA, CODEMPRESA) VALUES (:C,
             NEW.CODIGO, NEW.CODPRODUTO, NEW.CODMOVIMENTO, '0000', NEW.ICMSVENDA,
             NEW.VALOR_VENDA, :ETIQUETA, NEW.QUANTIDADE, 0, :BARRA, :EMPRESA);
       END
    END

   /* ATUALIZO O VALOR DOS ITENS E DO IPI */
   UPDATE
     MOVIMENTOS
   SET
     VALOR_ITENS = VALOR_ITENS + NEW.VALOR_TOTAL,
     VALOR_IPI_PRODUTOS = VALOR_IPI_PRODUTOS + NEW.VALOR_IPI
   WHERE
     CODIGO = :CODIGO;
  END
END!

ALTER TRIGGER ORSOMA_DEL
ACTIVE BEFORE DELETE POSITION 0
AS
   DECLARE VARIABLE PS CHAR(1);
BEGIN
  SELECT
    PS
  FROM
    PRODUTOS
  WHERE
    CODIGO = OLD.CODPRODUTO
  INTO
    :PS;
  /* ATUALIZO O VALOR DOS PRODUTOS E DO IPI */
  if (PS = 'P') then
   UPDATE
     MOVIMENTOS
   SET
     VALOR_ITENS = VALOR_ITENS - OLD.VALOR_TOTAL,
     VALOR_IPI_PRODUTOS = VALOR_IPI_PRODUTOS - OLD.VALOR_IPI
   WHERE
     CODIGO = OLD.CODMOVIMENTO;
END!

ALTER TABLE INDIVIDUAIS
ADD CUSTO_PRODUTO DINHEIRO
NOT NULL!

UPDATE INDIVIDUAIS SET CUSTO_PRODUTO = '0'!

ALTER TABLE INDIVIDUAIS
ADD CUSTO_IPI DINHEIRO
NOT NULL!

UPDATE INDIVIDUAIS SET CUSTO_IPI = '0'!

ALTER TABLE INDIVIDUAIS
ADD CUSTO_RATEIO DINHEIRO
NOT NULL!

UPDATE INDIVIDUAIS SET CUSTO_RATEIO = '0'!

ALTER TABLE INDIVIDUAIS
ADD CUSTO_ICMS DINHEIRO
NOT NULL!

UPDATE INDIVIDUAIS SET CUSTO_ICMS = '0'!

ALTER TABLE INDIVIDUAIS
ADD CUSTO_COMISSAO COMPUTED BY (VALOR_COMISSAO / QUANTIDADE)!

ALTER TRIGGER ORSOMA_INS
ACTIVE AFTER INSERT POSITION 0
AS
   DECLARE VARIABLE SOMA          NUMERIC(9,2);
   DECLARE VARIABLE CODIGO        INTEGER;
   DECLARE VARIABLE ES            CHAR(1);
   DECLARE VARIABLE TIPO          CHAR(1);
   DECLARE VARIABLE ETIQUETA      CHAR(1);
   DECLARE VARIABLE NUMETIQ       INTEGER;
   DECLARE VARIABLE INDIVIDUAL    CHAR(1);
   DECLARE VARIABLE SEQUENCIA     INTEGER;
   DECLARE VARIABLE SEQUENSTR     CHAR(4);
   DECLARE VARIABLE N             INTEGER;
   DECLARE VARIABLE C             INTEGER;
   DECLARE VARIABLE BARRA         CHAR(14);
   DECLARE VARIABLE PS            CHAR(1);
   declare variable EMPRESA       INTEGER;
   declare variable CUSTO_PRODUTO NUMERIC(9, 2);
   declare variable CUSTO_IPI     NUMERIC(9, 2);
BEGIN
 /* VERIFICO SE EXISTE CÓDIGO DE BARRAS VÁLIDO */
 SELECT BARRA, PS FROM PRODUTOS WHERE CODIGO = NEW.CODPRODUTO INTO :BARRA, :PS;
 IF (BARRA = '0000000000000') THEN
      EXCEPTION BARRA_NECESSARIA;
 IF (PS = 'P') THEN
  BEGIN
   CODIGO = NEW.CODMOVIMENTO;
   SELECT ES, TIPO, CODEMPRESA FROM MOVIMENTOS WHERE CODIGO = :CODIGO
     INTO :ES, :TIPO, :EMPRESA;
   IF ((ES = 1) AND (TIPO = 1)) THEN
    BEGIN
      UPDATE PRODUTOS SET PRECOCUSTO = NEW.VALOR_UNITARIO
        WHERE CODIGO = NEW.CODPRODUTO;
      IF (NEW.REAJUSTAR = 'S') THEN
        UPDATE PRODUTOS SET PRECOVENDA = NEW.VALOR_VENDA,
          ICMS = NEW.ICMSVENDA WHERE CODIGO = NEW.CODPRODUTO;
      SELECT ETIQUETA, INDIVIDUAL, SEQUENCIA, BARRA FROM PRODUTOS
        WHERE CODIGO = NEW.CODPRODUTO
        INTO :ETIQUETA, :INDIVIDUAL, :SEQUENCIA, :BARRA;
      N = 0;
      IF (INDIVIDUAL = 'S') THEN
       BEGIN
        WHILE (N < NEW.QUANTIDADE) DO
         BEGIN
           N = N + 1;
           SEQUENCIA = (SEQUENCIA + 1);
           IF (SEQUENCIA > 99) THEN SEQUENSTR = ('0' || SEQUENCIA);
            ELSE IF (SEQUENCIA > 9) THEN SEQUENSTR = ('00' || SEQUENCIA);
             ELSE IF (SEQUENCIA > 0) THEN SEQUENSTR = ('000' || SEQUENCIA);
              ELSE SEQUENSTR = '0000';
           BARRA = EAN('999' || NEW.CODPRODUTO || SEQUENSTR || '0');

           /* CUSTO PRODUTO, IPI */
           CUSTO_PRODUTO = NEW.VALOR_TOTAL / NEW.QUANTIDADE;
           CUSTO_IPI = NEW.VALOR_IPI / NEW.QUANTIDADE;

           EXECUTE PROCEDURE SEQ_OBTER 'INDIVIDUAIS'
             RETURNING_VALUES C;

           INSERT INTO
              INDIVIDUAIS (
                CODIGO,
                CODITEM,
                CODPRODUTO,
                CODMOVENTRADA,
                SEQUENCIA,
                ICMSVENDA,
                VALOR_VENDA,
                IMPETIQ,
                QUANTIDADE,
                UNICO,
                BARRA,
                CODEMPRESA,
                CUSTO_PRODUTO,
                CUSTO_IPI)
              VALUES (
                :C,
                NEW.CODIGO,
                NEW.CODPRODUTO,
                NEW.CODMOVIMENTO,
                :SEQUENSTR,
                NEW.ICMSVENDA,
                NEW.VALOR_VENDA,
                :ETIQUETA,
                1,
                1,
                :BARRA,
                :EMPRESA,
                :CUSTO_PRODUTO,
                :CUSTO_IPI);
         END
        UPDATE PRODUTOS SET SEQUENCIA = (SEQUENCIA + NEW.QUANTIDADE)
          WHERE CODIGO = NEW.CODPRODUTO;
       END ELSE
       BEGIN
           EXECUTE PROCEDURE SEQ_OBTER 'INDIVIDUAIS'
             RETURNING_VALUES C;
           INSERT INTO INDIVIDUAIS (CODIGO, CODITEM, CODPRODUTO, CODMOVENTRADA, SEQUENCIA,
             ICMSVENDA, VALOR_VENDA, IMPETIQ, QUANTIDADE, UNICO, BARRA, CODEMPRESA) VALUES (:C,
             NEW.CODIGO, NEW.CODPRODUTO, NEW.CODMOVIMENTO, '0000', NEW.ICMSVENDA,
             NEW.VALOR_VENDA, :ETIQUETA, NEW.QUANTIDADE, 0, :BARRA, :EMPRESA);
       END
    END

   /* ATUALIZO O VALOR DOS ITENS E DO IPI */
   UPDATE
     MOVIMENTOS
   SET
     VALOR_ITENS = VALOR_ITENS + NEW.VALOR_TOTAL,
     VALOR_IPI_PRODUTOS = VALOR_IPI_PRODUTOS + NEW.VALOR_IPI
   WHERE
     CODIGO = :CODIGO;
  END
END!

CREATE PROCEDURE RATEIO_CUSTOS (
    CODMOVIMENTO INTEGER,
    VALOR_PRODUTOS NUMERIC(9,2),
    VALOR_RATEIO NUMERIC(9,2))
AS
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE CUSTO_PRODUTO NUMERIC(9,2);
DECLARE VARIABLE QUANTIDADE INTEGER;
DECLARE VARIABLE PORCENT_CUSTO NUMERIC(9,2);
DECLARE VARIABLE RATEAR NUMERIC(9,2);
BEGIN

  FOR
  SELECT
    CODIGO,
    CUSTO_PRODUTO,
    QUANTIDADE
  FROM
    INDIVIDUAIS
  WHERE
    CODMOVENTRADA = :CODMOVIMENTO
  INTO
    :CODIGO,
    :CUSTO_PRODUTO,
    :QUANTIDADE
  DO
  BEGIN

    PORCENT_CUSTO = (CUSTO_PRODUTO * QUANTIDADE * 100) / VALOR_PRODUTOS;
    RATEAR = VALOR_RATEIO * (PORCENT_CUSTO / 100);
    RATEAR = RATEAR / QUANTIDADE;

    UPDATE
      INDIVIDUAIS
    SET
      CUSTO_RATEIO = :RATEAR
    WHERE
      CODIGO = :CODIGO;

  END

END!

GRANT EXECUTE ON PROCEDURE RATEIO_CUSTOS TO PUBLIC!

ALTER TRIGGER STATUS_UPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
   IF (NEW.TIPO = 0) THEN NEW.STATUS = 'ORÇAMENTO';
   IF (NEW.TIPO = 1) THEN NEW.STATUS = 'COMPRA';
   IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA';
   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRE ASSITENCIA';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';
   /* fechou a venda */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN
     /* usuário, data e hora do fechamento */
     NEW.DATAFECHAMENTO = 'NOW';
     NEW.USUARIOFECHAMENTO = USER;
     /* total da comissao */
     SELECT
       SUM(VALOR_COMISSAO)
     FROM
       INDIVIDUAIS
     WHERE
       CODMOVSAIDA = OLD.CODIGO AND
       VENDIDO = 'S'
     INTO
       NEW.VALOR_COMISSAO;
     IF (NEW.VALOR_COMISSAO IS NULL) THEN
       NEW.VALOR_COMISSAO = 0.0;
    END

   /* CALCULO DO ICMS */
   IF (NEW.ICMSSIMPLES = 'S') THEN
      NEW.VALOR_ICMS = (NEW.VALOR_ITENS * (NEW.ICMSSIMPALIQ / 100));
   ELSE
   BEGIN
      SELECT
        SUM(VALOR_ICMS)
      FROM
        INDIVIDUAIS
      WHERE
        CODMOVSAIDA = NEW.CODIGO AND
        VENDIDO = 'S'
      INTO
        NEW.VALOR_ICMS;
      if (NEW.VALOR_ICMS IS NULL) THEN
        NEW.VALOR_ICMS = 0;
   END

   /* RATEIO DOS CUSTOS DE COMPRA */
   if ((NEW.ES = 1) AND (NEW.TIPO = 1)) then
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END!

ALTER TABLE INDIVIDUAIS
ADD CUSTO_ISS DINHEIRO
NOT NULL!

UPDATE INDIVIDUAIS SET CUSTO_ISS = '0'!

ALTER TABLE INDIVIDUAIS
ADD CUSTO_TOTAL COMPUTED BY (CUSTO_PRODUTO + CUSTO_IPI + CUSTO_RATEIO + CUSTO_COMISSAO + CUSTO_ICMS + CUSTO_ISS)!

CREATE TRIGGER INDIVIDUAIS_BU0 FOR INDIVIDUAIS
ACTIVE BEFORE UPDATE POSITION 0
AS
  DECLARE VARIABLE ICMSSIMPLES CHAR(1);
  DECLARE VARIABLE ALIQUOTA_ICMSSIMPLES NUMERIC(9, 4);
  DECLARE VARIABLE ALIQUOTA_ISS NUMERIC(9, 4);
  DECLARE VARIABLE VALOR_ICMSCOMPRA NUMERIC(9, 2);
  DECLARE VARIABLE VALOR_ICMSVENDA NUMERIC(9, 2);
  DECLARE VARIABLE QUANTIDADE NUMERIC(9, 2);
BEGIN

  /* ESTE TRIGGER CALCULA OS IMPOSTOS DE VENDA */

  /* FOI VENDIDO O ITEM? */
  IF ((OLD.VENDIDO = 'N') AND (NEW.VENDIDO = 'S')) THEN
   BEGIN

     /* PRODUTO OU SERVIÇO? */
     IF (NEW.PS = 'P') THEN
      BEGIN

        /* PRODUTO */

        /* DADOS DO ICMS DA EMPRESA */
        SELECT
          ALIQUOTA_ICMSSIMPLES,
          ICMSSIMPLES
        FROM
          SISCONFIG
        WHERE
          CODIGO = NEW.CODEMPRESA
        INTO
          :ALIQUOTA_ICMSSIMPLES,
          :ICMSSIMPLES;

        /* ICMS É SIMPLES OU SUBTRAÇÃO? */
        IF (ICMSSIMPLES = 'S') THEN
         BEGIN

           /* ICMS SIMPLES */
           /* SOMENTE APLICAR A ALIQUOTA */
           NEW.CUSTO_ICMS =
             (NEW.VALOR_PAGO / NEW.QUANTIDADE) *
             (ALIQUOTA_ICMSSIMPLES / 100);

         END ELSE
         BEGIN

           /* ICMS DE SUBTRAÇÃO */

           /* RECUPERO O CUSTO DE ICMS DA COMPRA */
           SELECT
             VALOR_ICMSCOMPRA,
             QUANTIDADE
           FROM
             TEMPITENS
           WHERE
             CODIGO = NEW.CODITEM AND
             CODMOVIMENTO = NEW.CODMOVENTRADA AND
             CODPRODUTO = NEW.CODPRODUTO
           INTO
             :VALOR_ICMSCOMPRA,
             :QUANTIDADE;

           /* CALCULO SOMENTE O ITEM COMPRADO */
           IF (VALOR_ICMSCOMPRA IS NULL) THEN
             VALOR_ICMSCOMPRA = 0;
           VALOR_ICMSCOMPRA = (VALOR_ICMSCOMPRA / QUANTIDADE);

           /* CALCULO SOMENTE O ITEM VENDIDO */
           VALOR_ICMSVENDA =
             (NEW.VALOR_ICMS / NEW.QUANTIDADE);

           /* APLICO O RESULTADO DA SUBTRAÇÃO */
           NEW.CUSTO_ICMS =
             (VALOR_ICMSVENDA - VALOR_ICMSCOMPRA);

         END

      END ELSE
      BEGIN

        /* SERVIÇO */

        /* RECUPERO A ALIQUOTA DO ISS DA EMPRESA */
        SELECT
          ALIQUOTA_ISS
        FROM
          SISCONFIG
        WHERE
          CODIGO = NEW.CODEMPRESA
        INTO
          :ALIQUOTA_ISS;

        /* APLICO A ALIQUOTA PARA 1 ITEM */
        NEW.CUSTO_ISS =
          (NEW.VALOR_PAGO / NEW.QUANTIDADE) *
          (ALIQUOTA_ISS / 100);

      END

   END /* VENDIDO? */

END!

ALTER TABLE INDIVIDUAIS
ADD TOTAL_IPI COMPUTED BY (CUSTO_IPI * QUANTIDADE)!

ALTER TABLE INDIVIDUAIS
ADD TOTAL_ICMS COMPUTED BY (CUSTO_ICMS * QUANTIDADE)!

ALTER TABLE INDIVIDUAIS
ADD TOTAL_ISS COMPUTED BY (CUSTO_ISS * QUANTIDADE)!

ALTER TABLE INDIVIDUAIS
ADD TOTAL_CUSTO COMPUTED BY (CUSTO_TOTAL * QUANTIDADE)!

ALTER TABLE INDIVIDUAIS
ADD TOTAL_LUCRO COMPUTED BY (VALOR_PAGO - TOTAL_CUSTO)!

ALTER TABLE INDIVIDUAIS
ADD LUCRO_ITEM COMPUTED BY (TOTAL_LUCRO / QUANTIDADE)!

CREATE PROCEDURE PREENCHER_CUSTO 
AS
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE VALOR_UNITARIO NUMERIC(9,2);
DECLARE VARIABLE DESCONTO NUMERIC(9,2);
DECLARE VARIABLE QUANTIDADE INTEGER;
BEGIN

  FOR
  SELECT
    ID.CODIGO,
    ID.QUANTIDADE,
    TI.VALOR_UNITARIO,
    TI.DESCONTO
  FROM
    INDIVIDUAIS ID
    LEFT JOIN TEMPITENS TI ON
      ((ID.CODITEM = TI.CODIGO) AND
       (ID.CODMOVENTRADA = TI.CODMOVIMENTO) AND
       (ID.CODPRODUTO = TI.CODPRODUTO))
  WHERE
    ID.CUSTO_PRODUTO = 0
  INTO
    :CODIGO,
    :QUANTIDADE,
    :VALOR_UNITARIO,
    :DESCONTO
  DO
  BEGIN

    IF (QUANTIDADE IS NULL) THEN
      QUANTIDADE = 0;

    IF (QUANTIDADE = 0) THEN
     BEGIN

       UPDATE
         INDIVIDUAIS
       SET
         VENDIDO = 'N'
       WHERE
         CODIGO = :CODIGO;

       DELETE FROM
         INDIVIDUAIS
       WHERE
         CODIGO = :CODIGO;

     END ELSE
     BEGIN

       UPDATE
         INDIVIDUAIS
       SET
         CUSTO_PRODUTO = (:VALOR_UNITARIO - :DESCONTO)
       WHERE
         CODIGO = :CODIGO;

     END

  END

END!

EXECUTE PROCEDURE PREENCHER_CUSTO!

DROP PROCEDURE PREENCHER_CUSTO!

CREATE EXCEPTION QUANTIDADE_POSITIVA 'A QUANTIDADE DEVE SER POSITIVA'!

ALTER TRIGGER INDIVIDUAIS_BU0
ACTIVE BEFORE UPDATE POSITION 0
AS
  DECLARE VARIABLE ICMSSIMPLES CHAR(1);
  DECLARE VARIABLE ALIQUOTA_ICMSSIMPLES NUMERIC(9, 4);
  DECLARE VARIABLE ALIQUOTA_ISS NUMERIC(9, 4);
  DECLARE VARIABLE VALOR_ICMSCOMPRA NUMERIC(9, 2);
  DECLARE VARIABLE VALOR_ICMSVENDA NUMERIC(9, 2);
  DECLARE VARIABLE QUANTIDADE NUMERIC(9, 2);
BEGIN

  /* ESTE TRIGGER CALCULA OS IMPOSTOS DE VENDA E VERIFICA A QUANTIDADE */

  /* VERIFICAÇÃO DA QUANTIDADE */
  IF ((NEW.QUANTIDADE IS NULL) OR (NEW.QUANTIDADE = 0)) THEN
    EXCEPTION QUANTIDADE_POSITIVA;

  /* FOI VENDIDO O ITEM? */
  IF ((OLD.VENDIDO = 'N') AND (NEW.VENDIDO = 'S')) THEN
   BEGIN

     /* PRODUTO OU SERVIÇO? */
     IF (NEW.PS = 'P') THEN
      BEGIN

        /* PRODUTO */

        /* DADOS DO ICMS DA EMPRESA */
        SELECT
          ALIQUOTA_ICMSSIMPLES,
          ICMSSIMPLES
        FROM
          SISCONFIG
        WHERE
          CODIGO = NEW.CODEMPRESA
        INTO
          :ALIQUOTA_ICMSSIMPLES,
          :ICMSSIMPLES;

        /* ICMS É SIMPLES OU SUBTRAÇÃO? */
        IF (ICMSSIMPLES = 'S') THEN
         BEGIN

           /* ICMS SIMPLES */
           /* O ICMS É UMA CONSTANTE */
           NEW.ICMSVENDA = ALIQUOTA_ICMSSIMPLES;
           /* SOMENTE APLICAR A ALIQUOTA */
           NEW.CUSTO_ICMS =
             (NEW.VALOR_PAGO / NEW.QUANTIDADE) *
             (ALIQUOTA_ICMSSIMPLES / 100);

         END ELSE
         BEGIN

           /* ICMS DE SUBTRAÇÃO */

           /* RECUPERO O CUSTO DE ICMS DA COMPRA */
           SELECT
             VALOR_ICMSCOMPRA,
             QUANTIDADE
           FROM
             TEMPITENS
           WHERE
             CODIGO = NEW.CODITEM AND
             CODMOVIMENTO = NEW.CODMOVENTRADA AND
             CODPRODUTO = NEW.CODPRODUTO
           INTO
             :VALOR_ICMSCOMPRA,
             :QUANTIDADE;

           /* CALCULO SOMENTE O ITEM COMPRADO */
           IF (VALOR_ICMSCOMPRA IS NULL) THEN
             VALOR_ICMSCOMPRA = 0;
           VALOR_ICMSCOMPRA = (VALOR_ICMSCOMPRA / QUANTIDADE);

           /* CALCULO SOMENTE O ITEM VENDIDO */
           VALOR_ICMSVENDA =
             (NEW.VALOR_ICMS / NEW.QUANTIDADE);

           /* APLICO O RESULTADO DA SUBTRAÇÃO */
           NEW.CUSTO_ICMS =
             (VALOR_ICMSVENDA - VALOR_ICMSCOMPRA);

         END

      END ELSE
      BEGIN

        /* SERVIÇO */

        /* RECUPERO A ALIQUOTA DO ISS DA EMPRESA */
        SELECT
          ALIQUOTA_ISS
        FROM
          SISCONFIG
        WHERE
          CODIGO = NEW.CODEMPRESA
        INTO
          :ALIQUOTA_ISS;

        /* APLICO A ALIQUOTA PARA 1 ITEM */
        NEW.CUSTO_ISS =
          (NEW.VALOR_PAGO / NEW.QUANTIDADE) *
          (ALIQUOTA_ISS / 100);

      END

   END /* VENDIDO? */

END!

ALTER TRIGGER STATUS_INSERT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
   IF (NEW.TIPO = 0) THEN NEW.STATUS = 'ORÇAMENTO';
   IF (NEW.TIPO = 1) THEN NEW.STATUS = 'COMPRA';
   IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA';
   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRE ASSITENCIA';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNADO';

   /* BASES DE CALCULO DO ICMS E ISS */
   SELECT
     ALIQUOTA_ISS,
     ALIQUOTA_ICMSSIMPLES,
     ICMSSIMPLES
   FROM
     SISCONFIG
   WHERE
     CODIGO = NEW.CODEMPRESA
   INTO
     NEW.ISSALIQ,
     NEW.ICMSSIMPALIQ,
     NEW.ICMSSIMPLES;

END!


ALTER TRIGGER STATUS_UPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
   IF (NEW.TIPO = 0) THEN NEW.STATUS = 'ORÇAMENTO';
   IF (NEW.TIPO = 1) THEN NEW.STATUS = 'COMPRA';
   IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA';
   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRE ASSITENCIA';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';
      NEW.USUARIOFECHAMENTO = USER;

      /* TOTAL DA COMISSAO */
      SELECT
        SUM(VALOR_COMISSAO)
      FROM
        INDIVIDUAIS
      WHERE
        CODMOVSAIDA = OLD.CODIGO AND
        VENDIDO = 'S'
      INTO
        NEW.VALOR_COMISSAO;

      IF (NEW.VALOR_COMISSAO IS NULL) THEN
        NEW.VALOR_COMISSAO = 0.0;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END!







INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (79, CURRENT_TIMESTAMP)!
