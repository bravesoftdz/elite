/*
** FIM DA MARGEM EM CAMPO CALCULADO
*/

SET TERM !;

DROP PROCEDURE ESTOQUE!

DROP PROCEDURE ESTOQUE_MINIMO!

ALTER TABLE "PRODUTOS" DROP "MARGEM"!

ALTER TABLE PRODUTOS ADD MARGEM PORCENTO!

CREATE EXCEPTION PRECOCUSTO_MAIOR 'O PRECO DE CUSTO DEVE SER MENOR OU IGUAL AO DE VENDA'!

ALTER TRIGGER VERIFICA_BARRA_INS
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE TEMP_EAN VARCHAR(13);
BEGIN
   IF (NEW.INDIVIDUAL = 'N') THEN
    BEGIN
     EXECUTE PROCEDURE CALC_EAN13(NEW.BARRA)
       RETURNING_VALUES :TEMP_EAN;
     IF (NEW.BARRA <> TEMP_EAN) THEN
        EXCEPTION PRODUTO_BARRA;
    END
   IF ((NEW.PRECOCUSTO < 0) OR (NEW.PRECOVENDA < 0)) THEN
      EXCEPTION VALOR_ZERO;
   IF (NEW.PRECOCUSTO > NEW.PRECOVENDA) THEN
      EXCEPTION PRECOCUSTO_MAIOR;
END!

ALTER TRIGGER VERIFICA_BARRA_UPD
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE TEMP_EAN VARCHAR(13);
BEGIN
   IF (NEW.INDIVIDUAL = 'N') THEN
    BEGIN
     EXECUTE PROCEDURE CALC_EAN13(NEW.BARRA)
       RETURNING_VALUES :TEMP_EAN;
     IF (NEW.BARRA <> TEMP_EAN) THEN
        EXCEPTION PRODUTO_BARRA;
    END
   IF ((NEW.PRECOCUSTO < 0) OR (NEW.PRECOVENDA < 0)) THEN
      EXCEPTION VALOR_ZERO;
   IF (NEW.PRECOCUSTO > NEW.PRECOVENDA) THEN
      EXCEPTION PRECOCUSTO_MAIOR;
END!

/* AQUI */

ALTER TRIGGER VERIFICA_BARRA_INS INACTIVE!

ALTER TRIGGER VERIFICA_BARRA_UPD INACTIVE!

UPDATE PRODUTOS SET MARGEM = 0!

CREATE TRIGGER PRODUTOS_MARGEM_INS FOR PRODUTOS
ACTIVE BEFORE INSERT POSITION 200
AS
DECLARE VARIABLE X NUMERIC(9, 4);
BEGIN

  X = UDF_DZERO((NEW.PRECOVENDA * 100), NEW.PRECOCUSTO);

  IF (X > 0) THEN
    X = (100 - X);
  
  IF ((X = 0) AND (NEW.PRECOVENDA > 0)) THEN
    X = NEW.PRECOVENDA;

  NEW.MARGEM = X;

END!

CREATE TRIGGER PRODUTOS_MARGEM_UPD FOR PRODUTOS
ACTIVE BEFORE UPDATE POSITION 200
AS
DECLARE VARIABLE X NUMERIC(9, 4);
BEGIN

  X = UDF_DZERO((NEW.PRECOVENDA * 100), NEW.PRECOCUSTO);

  IF (X > 0) THEN
    X = (100 - X);

  IF ((X = 0) AND (NEW.PRECOVENDA > 0)) THEN
    X = NEW.PRECOVENDA;

  NEW.MARGEM = X;

END!

ALTER TRIGGER VERIFICA_BARRA_INS ACTIVE!

ALTER TRIGGER VERIFICA_BARRA_UPD ACTIVE!

CREATE PROCEDURE ESTOQUE 
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(14) CHARACTER SET NONE,
    DESCRICAO VARCHAR(60) CHARACTER SET NONE,
    PRECOCUSTO NUMERIC(9,2),
    PRECOVENDA NUMERIC(9,2),
    TOTALCUSTO NUMERIC(9,2),
    TOTALVENDA NUMERIC(9,2),
    LUCRO NUMERIC(9,4),
    OCULTO CHAR(1) CHARACTER SET NONE,
    MINIMO NUMERIC(9,2),
    GRUPO VARCHAR(40) CHARACTER SET NONE,
    QUANTIDADE NUMERIC(9,2),
    TOTALSERVICO NUMERIC(9,2),
    CODEMPRESA INTEGER,
    EMPRESA_NOME VARCHAR(50) CHARACTER SET NONE)
AS
BEGIN

  FOR
  SELECT
    SI.CODIGO,
    CL.NOME
  FROM
    SISCONFIG SI
    LEFT JOIN CLIENTES CL ON
      (CL.CODIGO = SI.CODCLIENTE)
  ORDER BY
    SI.CODIGO
  INTO
    :CODEMPRESA,
    :EMPRESA_NOME
  DO
  BEGIN

    FOR
    SELECT
      PO.CODIGO,
      PO.BARRA,
      PO.DESCRICAO,
      PO.PRECOCUSTO,
      PO.PRECOVENDA,
      CAST(PO.MARGEM AS NUMERIC(9, 4)) AS LUCRO,
      PO.OCULTO,
      PO.MINIMO,
      GU.GRUPO,
      (
         SELECT
           SUM(QUANTIDADE)
         FROM
           INDIVIDUAIS ID
         WHERE
           ID.CODPRODUTO = PO.CODIGO AND
           ID.VENDIDO = 'N' AND
           ID.CODEMPRESA = :CODEMPRESA
      ) AS QUANTIDADE,
      (
         SELECT
           (SE.PRECOVENDA + PO.PRECOVENDA)
         FROM
           PRODUTOS SE
         WHERE
           SE.CODIGO = PO.CODSERVICO AND
           SE.PS = 'S'
       ) AS TOTALSERVICO
    FROM
      PRODUTOS PO
      LEFT JOIN GRUPOS GU ON
        (GU.CODIGO = PO.GRUPO)
    WHERE
      PO.PS = 'P'
    INTO
      :CODIGO,
      :BARRA,
      :DESCRICAO,
      :PRECOCUSTO,
      :PRECOVENDA,
      :LUCRO,
      :OCULTO,
      :MINIMO,
      :GRUPO,
      :QUANTIDADE,
      :TOTALSERVICO
    DO
    BEGIN
      TOTALCUSTO = (PRECOCUSTO * QUANTIDADE);
      TOTALVENDA = (PRECOVENDA * QUANTIDADE);
      IF (QUANTIDADE IS NULL) THEN
        QUANTIDADE = 0;
      SUSPEND;
    END

  END
END!

GRANT EXECUTE ON PROCEDURE ESTOQUE TO PUBLIC!


CREATE PROCEDURE ESTOQUE_MINIMO 
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(14) CHARACTER SET NONE,
    DESCRICAO VARCHAR(60) CHARACTER SET NONE,
    PRECOCUSTO NUMERIC(9,2),
    PRECOVENDA NUMERIC(9,2),
    TOTALCUSTO NUMERIC(9,2),
    TOTALVENDA NUMERIC(9,2),
    LUCRO NUMERIC(9,4),
    OCULTO CHAR(1) CHARACTER SET NONE,
    MINIMO NUMERIC(9,2),
    GRUPO VARCHAR(40) CHARACTER SET NONE,
    QUANTIDADE NUMERIC(9,2),
    TOTALSERVICO NUMERIC(9,2),
    CODEMPRESA INTEGER,
    EMPRESA_NOME VARCHAR(50) CHARACTER SET NONE)
AS
BEGIN

  FOR
  SELECT
    SI.CODIGO,
    CL.NOME
  FROM
    SISCONFIG SI
    LEFT JOIN CLIENTES CL ON
      (CL.CODIGO = SI.CODCLIENTE)
  ORDER BY
    SI.CODIGO
  INTO
    :CODEMPRESA,
    :EMPRESA_NOME
  DO
  BEGIN

    FOR
    SELECT
      PO.CODIGO,
      PO.BARRA,
      PO.DESCRICAO,
      PO.PRECOCUSTO,
      PO.PRECOVENDA,
      CAST(PO.MARGEM AS NUMERIC(9, 4)) AS LUCRO,
      PO.OCULTO,
      PO.MINIMO,
      GU.GRUPO,
      (
         SELECT
           SUM(QUANTIDADE)
         FROM
           INDIVIDUAIS ID
         WHERE
           ID.CODPRODUTO = PO.CODIGO AND
           ID.VENDIDO = 'N' AND
           ID.CODEMPRESA = :CODEMPRESA
      ) AS QUANTIDADE,
      (
         SELECT
           (SE.PRECOVENDA + PO.PRECOVENDA)
         FROM
           PRODUTOS SE
         WHERE
           SE.CODIGO = PO.CODSERVICO AND
           SE.PS = 'S'
       ) AS TOTALSERVICO
    FROM
      PRODUTOS PO
      LEFT JOIN GRUPOS GU ON
        (GU.CODIGO = PO.GRUPO)
    WHERE
      PO.PS = 'P'
    INTO
      :CODIGO,
      :BARRA,
      :DESCRICAO,
      :PRECOCUSTO,
      :PRECOVENDA,
      :LUCRO,
      :OCULTO,
      :MINIMO,
      :GRUPO,
      :QUANTIDADE,
      :TOTALSERVICO
    DO
    BEGIN
      TOTALCUSTO = (PRECOCUSTO * QUANTIDADE);
      TOTALVENDA = (PRECOVENDA * QUANTIDADE);
      IF (QUANTIDADE IS NULL) THEN
        QUANTIDADE = 0;
      IF (QUANTIDADE <= MINIMO) THEN
        SUSPEND;
    END

  END
END!

GRANT EXECUTE ON PROCEDURE ESTOQUE_MINIMO TO PUBLIC!

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (121, CURRENT_TIMESTAMP)!